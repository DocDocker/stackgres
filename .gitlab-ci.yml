# GraalVM Quarkus image
image: docker.io/ongres/ubi-graalvm-maven:19.3.1-java8

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: |
               -Dhttps.protocols=TLSv1.2
               -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
               -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
               -Dorg.slf4j.simpleLogger.showDateTime=true
               -Djava.awt.headless=true
               -XX:+UseParallelOldGC
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: |
                   -f stackgres-k8s/src/pom.xml
                   --batch-mode
                   --errors
                   --fail-at-end
                   --show-version
                   -DinstallAtEnd=true
                   -DdeployAtEnd=true
                   -Dsurefire.useFile=false
                   -Dsurefire.useFile=false
                   -DtrimStackTrace=false
  DISABLE_IT: "true"
  E2E_ENV: kind
  E2E_PARALLELISM: 32
  K8S_VERSION: 1.13.12
  K8S_FROM_DIND: "true"
  K8S_REUSE: "true"
  DOCUMENTATION_BASE_URL: "https://ongresinc.gitlab.io/web/stackgres/doc/latest"
  PRODUCTION_DOCUMENTATION_BASE_URL: "https://stackgres.io/doc/latest"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - compile
  - package
  - pre test
  - test
  - check-release
  - deploy

compile:
  stage: compile
  variables:
    QUARKUS_PROFILE: "test"
  tags:
    - stackgres-runner
  script:
    - 'mvn $MAVEN_CLI_OPTS clean verify -P safer'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - stackgres-k8s/src/target
      - stackgres-k8s/src/*/target

build documentation:
  image: monachus/hugo
  stage: compile
  script:
  - |
    if [[ ! -z "$CI_COMMIT_TAG" && ! "$CI_COMMIT_TAG" =~ ^latest-.*$ ]]
    then
      DOCUMENTATION_BASE_URL="$PRODUCTION_DOCUMENTATION_BASE_URL"
    fi
  - sh -x doc/build.sh
  - STACKGRES_VERSION="$(echo 'import xml.etree.ElementTree as ET; print ET.parse("stackgres-k8s/src/pom.xml").getroot().find("{%s}version" % "http://maven.apache.org/POM/4.0.0").text' | python)"
  - mkdir -p "doc/public/$STACKGRES_VERSION"
  - hugo -v --source doc --destination "$(pwd)/doc/public/$STACKGRES_VERSION" --baseURL="$DOCUMENTATION_BASE_URL"
  - cp -a "doc/public/$STACKGRES_VERSION" doc/public/latest
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - doc/public

native image:
  stage: package
  tags:
    - stackgres-runner
  dependencies:
    - compile
  timeout: 12 hour
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - |
      flock /tmp/stackgres-build-native  \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS package -P native
    - 'cp $GRAALVM_HOME/jre/lib/amd64/libsunec.so stackgres-k8s/src/operator/target/'
    - 'cp $GRAALVM_HOME/jre/lib/security/cacerts stackgres-k8s/src/operator/target/'
    - 'cp $GRAALVM_HOME/jre/lib/amd64/libsunec.so stackgres-k8s/src/api-web/target/'
    - 'cp $GRAALVM_HOME/jre/lib/security/cacerts stackgres-k8s/src/api-web/target/'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - stackgres-k8s/src/operator/target/libsunec.so
      - stackgres-k8s/src/operator/target/cacerts
      - stackgres-k8s/src/operator/target/stackgres-operator-runner
      - stackgres-k8s/src/operator/target/lib/
      - stackgres-k8s/src/operator/target/stackgres-operator-runner.jar
      - stackgres-k8s/src/api-web/target/libsunec.so
      - stackgres-k8s/src/api-web/target/cacerts
      - stackgres-k8s/src/api-web/target/stackgres-restapi-runner
      - stackgres-k8s/src/api-web/target/lib/
      - stackgres-k8s/src/api-web/target/stackgres-restapi-runner.jar
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

enforce release:
  stage: check-release
  tags:
    - stackgres-runner
  dependencies:
    - compile
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests -Dquarkus.skipAugmentation=true"
    - 'mvn $MAVEN_CLI_OPTS enforcer:enforce@enforce-no-snapshots'
  only:
    variables:
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/

build test images:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  timeout: 12 hour
  retry: 2
  script:
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests -Dquarkus.skipAugmentation=true"
    - |
      flock /tmp/stackgres-build-it-image  \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS pre-integration-test -P integration

build jvm image:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  timeout: 12 hour
  retry: 2
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - |
      flock /tmp/stackgres-build-jvm-image  \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS package -P build-image-jvm

build native image:
  stage: pre test
  tags:
    - stackgres-runner
  dependencies:
    - compile
    - native image
  timeout: 12 hour
  retry: 2
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - MAVEN_CLI_OPTS="$MAVEN_CLI_OPTS -DskipTests"
    - |
      flock /tmp/stackgres-build-native-image  \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS package -P build-image-native
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE

integration test:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  timeout: 12 hour
  script:
    - |
      flock -s /tmp/stackgres-build-native \
        flock /tmp/stackgres-integration-test \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration -Dit.skipBuildContainer=true
  only:
    variables:
      - $DO_EXTERNAL
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e tests jvm image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: jvm-image
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export E2E_ONLY_INCLUDES="$(sh stackgres-k8s/e2e/e2e get_all_non_exclusive_specs)"'
    - |
      flock -s /tmp/stackgres-build-native \
        flock /tmp/stackgres-integration-test-jvm-image \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e exclusive tests jvm image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: jvm-image-exclusive
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export E2E_ONLY_INCLUDES="$(sh stackgres-k8s/e2e/e2e get_all_exclusive_specs)"'
    - |
      flock -s /tmp/stackgres-build-native \
        flock /tmp/stackgres-integration-test-jvm-image-exclusive \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e tests native image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: native-image
    SKIP_QUARKUS_TEST: "true"
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export E2E_ONLY_INCLUDES="$(sh stackgres-k8s/e2e/e2e get_all_non_exclusive_specs)"'
    - |
      flock -s /tmp/stackgres-build-native \
        flock /tmp/stackgres-integration-test-native-image \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

e2e exclusive tests native image:
  stage: test
  tags:
    - stackgres-runner
  dependencies:
    - compile
  variables:
    OPERATOR_IN_KUBERNETES: "true"
    K8S_SUFFIX: native-image-exclusive
    SKIP_QUARKUS_TEST: "true"
  timeout: 12 hour
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export E2E_ONLY_INCLUDES="$(sh stackgres-k8s/e2e/e2e get_all_exclusive_specs)"'
    - |
      flock -s /tmp/stackgres-build-native \
        flock /tmp/stackgres-integration-test-native-image-exclusive \
        timeout -s KILL 3600 \
        mvn $MAVEN_CLI_OPTS verify -P integration \
          -DargLine=-Dcom.ongres.junit.docker.runnerId="$K8S_SUFFIX" \
          -Dit.skipBuildContainer=true
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_REF_NAME == "master"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
      - $DO_NATIVE
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - stackgres-k8s/src/operator/target/e2e

deploy jvm image:
  image: docker.io/ongres/builder:latest
  stage: deploy
  tags:
    - stackgres-runner
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"-jvm'
    - 'export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"-jvm'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export OPERATOR_IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"'
    - 'export RESTAPI_IMAGE_UPLOAD_NAME="stackgres/restapi:$IMAGE_UPLOAD_TAG"'
    - 'buildah pull docker-daemon:"$OPERATOR_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $OPERATOR_IMAGE_NAME "docker://docker.io/$OPERATOR_IMAGE_UPLOAD_NAME"'
    - 'buildah pull docker-daemon:"$RESTAPI_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $RESTAPI_IMAGE_NAME "docker://docker.io/$RESTAPI_IMAGE_UPLOAD_NAME"'
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY

deploy native image:
  image: docker.io/ongres/builder:latest
  stage: deploy
  tags:
    - stackgres-runner
  script:
    - 'export IMAGE_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"}"'
    - 'export IMAGE_UPLOAD_TAG="${CI_COMMIT_TAG:-"$CI_COMMIT_REF_NAME"}"'
    - 'export OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"'
    - 'export RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"'
    - 'export OPERATOR_IMAGE_UPLOAD_NAME="stackgres/operator:$IMAGE_UPLOAD_TAG"'
    - 'export RESTAPI_IMAGE_UPLOAD_NAME="stackgres/restapi:$IMAGE_UPLOAD_TAG"'
    - 'buildah pull docker-daemon:"$OPERATOR_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $OPERATOR_IMAGE_NAME "docker://docker.io/$OPERATOR_IMAGE_UPLOAD_NAME"'
    - 'buildah pull docker-daemon:"$RESTAPI_IMAGE_NAME"'
    - 'buildah push --format=docker --authfile $REGISTRY_AUTH_FILE $RESTAPI_IMAGE_NAME "docker://docker.io/$RESTAPI_IMAGE_UPLOAD_NAME"'
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "development"
      - $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^latest-.*$/
      - $DO_DEPLOY
