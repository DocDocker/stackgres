apiVersion: v1
kind: Namespace
metadata:
  name: "stackgres"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "stackgres-operator"
  namespace: "stackgres"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "stackgres-operator"
  namespace: "stackgres"
rules:
- apiGroups: ["", "apps", "extensions", "rbac.authorization.k8s.io"] # "" indicates the core API group
  resources:
  - pods
  - pods/exec
  - services
  - endpoints
  - persistentvolumeclaims
  - configmaps
  - secrets
  - statefulsets
  - deployments
  - clusterroles
  - clusterrolebindings
  - serviceaccounts
  - namespaces
  - roles
  - rolebindings
  verbs:
  - '*'
- apiGroups: ["apiextensions.k8s.io", "customresourcedefinitions.apiextensions.k8s.io"]
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups: ["stackgres.io"]
  resources:
  - sgclusters
  - sgprofiles
  - sgpgconfigs
  verbs:
  - watch
  - list
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "stackgres-operator"
  namespace: "stackgres"
subjects:
- kind: ServiceAccount
  name: "stackgres-operator"
  namespace: "stackgres"
roleRef:
  kind: ClusterRole
  name: "stackgres-operator"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app: "stackgres-operator"
    version: "0.6beta1-jvm"
    group: "stackgres.io"
  name: "stackgres-operator"
  namespace: "stackgres"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "stackgres-operator"
      version: "0.6beta1-jvm"
      group: "stackgres.io"
  template:
    metadata:
      labels:
        app: "stackgres-operator"
        version: "0.6beta1-jvm"
        group: "stackgres.io"
    spec:
      serviceAccountName: "stackgres-operator"
      containers:
      - name: "stackgres-operator"
        image: "stackgres/operator:0.6beta1-jvm"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 8080
          name: "http"
          protocol: "TCP"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 2
