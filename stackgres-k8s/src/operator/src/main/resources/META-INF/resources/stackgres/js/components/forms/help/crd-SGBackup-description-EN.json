{
    "metadata.name": "The name of the backup created (automatic backups) or to be created (if requesting manual creation).\nIt must follow\n[Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md),\nit must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more\nlowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a\nmaximum length of 63 characters, with the `-` character allowed anywhere except the first or last\ncharacter.\n\nThis name needs to be unique across all StackGres backups in the same namespace.\n",
    "spec.sgCluster": "The name of the `SGCluster` from which this backup is/will be taken.\n",
    "spec.subjectToRetentionPolicy": "Indicate if this backup is permanent and should not be removed by the automated retention policy.\n",
    "status.internalName": "The name of the backup.\n",
    "status.process.status": "The status of the backup.\n",
    "status.process.failure": "If the status is `failed` this field will contain a message indicating the failure reason.\n",
    "status.process.jobPod": "The name of pod assigned to this backup. StackGres utilizes internally a locking mechanism based on\nthe pod name of the job that creates the backup.\n",
    "status.process.subjectToRetentionPolicy": "Status (may be transient) until converging to `spec.subjectToRetentionPolicy`.\n",
    "status.process.timing.start": "The start time of backup.\n",
    "status.process.timing.end": "The end time of backup.\n",
    "status.process.timing.stored": "The time at which the backup is safely stored in the object storage.\n",
    "status.backupInformation.hostname": "The hostname of instance where the backup is taken.\n",
    "status.backupInformation.systemIdentifier": "The Postgres *system identifier* of the cluster this backup is taken from.\n",
    "status.backupInformation.postgresVersion": "The Postgres version of the server where backup is taken.\n",
    "status.backupInformation.pgData": "The data directory where the backup is taken.\n",
    "status.backupInformation.size.uncompressed": "Size (in bytes) of the uncompressed backup.\n",
    "status.backupInformation.size.compressed": "Size (in bytes) of the compressed backup.\n",
    "status.backupInformation.lsn.start": "The LSN of when backup started.\n",
    "status.backupInformation.lsn.end": "The LSN of when backup finished.\n",
    "status.backupInformation.startWalFile": "The WAL segment file name when backup was started.\n",
    "status.backupInformation.controlData": "An object containing data from the output of pg_controldata on the backup.\n",
    "status.sgBackupConfig.compression": "Select the backup compression algorithm. Possible options are: lz4, lzma, brotli. The default method\nis `lz4`. LZ4 is the fastest method, but compression ratio is the worst. LZMA is way slower, but\nit compresses backups about 6 times better than LZ4. Brotli is a good trade-off between speed and\ncompression ratio, being about 3 times better than LZ4.\n",
    "status.sgBackupConfig.storage.type": "Determine the type of object storage used for storing the base backups and WAL segments.\nPossible values:\n*  `s3`: Amazon Web Services S3 (Simple Storage Service).\n*  `s3Compatible`: non-AWS services that implement a compatibility API with AWS S3.\n*  `gcs`: Google Cloud Storage.\n*  `azureBlob`: Microsoft Azure Blob Storage.\n",
    "status.sgBackupConfig.storage.s3.bucket": "AWS S3 bucket name.\n",
    "status.sgBackupConfig.storage.s3.path": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per\nStackGres cluster, using the `SGCluster.metadata.name`.\n",
    "status.sgBackupConfig.storage.s3.region": "The AWS S3 region. The Region may be detected using s3:GetBucketLocation, but if you wish to\navoid giving permissions to this API call or forbid it from the applicable IAM policy, you must\nthen specify this property.\n",
    "status.sgBackupConfig.storage.s3.storageClass": "The [Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) to use for the backup\nobject storage. By default, the `STANDARD` storage class is used. Other supported values\ninclude `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n",
    "status.sgBackupConfig.storage.s3.awsCredentials.secretKeySelectors.accessKeyId.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.s3.awsCredentials.secretKeySelectors.accessKeyId.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.s3.awsCredentials.secretKeySelectors.secretAccessKey.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.s3.awsCredentials.secretKeySelectors.secretAccessKey.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.s3Compatible.bucket": "Bucket name.\n",
    "status.sgBackupConfig.storage.s3Compatible.path": "Optional path within the S3 bucket. Note that StackGres generates in any case a folder per\nStackGres cluster, using the `SGCluster.metadata.name`.\n",
    "status.sgBackupConfig.storage.s3Compatible.enablePathStyleAddressing": "Enable path-style addressing (i.e. `http://s3.amazonaws.com/BUCKET/KEY`) when connecting to an\nS3-compatible service that lacks support for sub-domain style bucket URLs\n(i.e. `http://BUCKET.s3.amazonaws.com/KEY`). Defaults to false.\n",
    "status.sgBackupConfig.storage.s3Compatible.endpoint": "Overrides the default url to connect to an S3-compatible service.\nFor example: `http://s3-like-service:9000`.\n",
    "status.sgBackupConfig.storage.s3Compatible.region": "The AWS S3 region. The Region may be detected using s3:GetBucketLocation, but if you wish to\navoid giving permissions to this API call or forbid it from the applicable IAM policy, you must\nthen specify this property.\n",
    "status.sgBackupConfig.storage.s3Compatible.storageClass": "The [Amazon S3 Storage Class](https://aws.amazon.com/s3/storage-classes/) to use for the backup\nobject storage. By default, the `STANDARD` storage class is used. Other supported values\ninclude `STANDARD_IA` for Infrequent Access and `REDUCED_REDUNDANCY`.\n",
    "status.sgBackupConfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.gcs.bucket": "GCS bucket name.\n",
    "status.sgBackupConfig.storage.gcs.path": "Optional path within the GCS bucket. Note that StackGres generates in any case a folder per\nStackGres cluster, using the `SGCluster.metadata.name`.\n",
    "status.sgBackupConfig.storage.gcs.gcpCredentials.secretKeySelectors.serviceAccountJSON.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.gcs.gcpCredentials.secretKeySelectors.serviceAccountJSON.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.azureBlob.bucket": "Azure Blob Storage bucket name.\n",
    "status.sgBackupConfig.storage.azureBlob.path": "Optional path within the Azure Blobk bucket. Note that StackGres generates in any case a folder\nper StackGres cluster, using the `SGCluster.metadata.name`.\n",
    "status.sgBackupConfig.storage.azureBlob.azureCredentials.secretKeySelectors.storageAccount.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.azureBlob.azureCredentials.secretKeySelectors.storageAccount.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n",
    "status.sgBackupConfig.storage.azureBlob.azureCredentials.secretKeySelectors.accessKey.key": "The key of the secret to select from. Must be a valid secret key.\n",
    "status.sgBackupConfig.storage.azureBlob.azureCredentials.secretKeySelectors.accessKey.name": "Name of the referent.\n[More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n"
  }
  