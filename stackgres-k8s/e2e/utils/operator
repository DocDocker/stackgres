#!/bin/sh

operator_pull_policy() {
  echo $E2E_OPERATOR_PULL_POLICY
}

install_operator() {
  kubectl get namespace stackgres > /dev/null 2>&1 \
    || kubectl create namespace stackgres

  if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" = true ]
  then
    set_up_private_repository
    install_operator_from_private_repository \
      $E2E_OPERATOR_OPTS "$@"
    return
  fi

  install_operator_vanilla \
    --set-string operator.image.name="${OPERATOR_IMAGE_NAME%:*}" --set-string operator.image.tag="${OPERATOR_IMAGE_NAME#*:}" \
    --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
    --set-string restapi.image.name="${RESTAPI_IMAGE_NAME%:*}" --set-string restapi.image.tag="${RESTAPI_IMAGE_NAME#*:}" \
    --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
    --set-string adminui.image.name="${ADMINUI_IMAGE_NAME%:*}" --set-string adminui.image.tag="${ADMINUI_IMAGE_NAME#*:}" \
    --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
    $E2E_OPERATOR_OPTS "$@"
}

install_operator_from_private_repository() {
  export PRIVATE_REPO_URI=$(get_private_repository_uri)
  export PRIVATE_OPERATOR_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/operator"
  export PRIVATE_RESTAPI_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/restapi"
  export PRIVATE_ADMINUI_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/admin-ui"
  install_operator_vanilla \
      --set-string operator.image.name="$PRIVATE_OPERATOR_IMAGE_NAME" --set-string operator.image.tag="$IMAGE_TAG" \
      --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
      --set-string restapi.image.name="$PRIVATE_RESTAPI_IMAGE_NAME" --set-string restapi.image.tag="$IMAGE_TAG" \
      --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
      --set-string adminui.image.name="$PRIVATE_ADMINUI_IMAGE_NAME" --set-string adminui.image.tag="$ADMINUI_IMAGE_TAG" \
      --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
      --set-string serviceAccount.repoCredentials="regcred" \
      "$@"
}

install_operator_vanilla() {
  helm install stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" \
    "$@"
}

upgrade_operator() {
  helm upgrade stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" --reuse-values "$@"
}

upgrade_or_install_operator() {
  if ! helm get notes stackgres-operator --namespace stackgres > /dev/null
  then
    install_operator "$@"
    return
  fi

  upgrade_operator "$@"
}

delete_operator() {
  ! helm get notes stackgres-operator --namespace stackgres > /dev/null \
    || helm delete stackgres-operator --namespace stackgres "$@" \
    || true
  k8s_cleanup_namespace stackgres
}

get_installed_operator_values() {
  helm get values --namespace stackgres stackgres-operator | tail -n +2
}

store_operator_values() {
  get_installed_operator_values > "$TARGET_PATH/operator-values.yaml"
}

reinstall_operator_if_not_as_expected() {
  if ! helm get notes stackgres-operator --namespace stackgres > /dev/null \
    || [ "$(get_installed_operator_values)" != "$(cat "$TARGET_PATH/operator-values.yaml")" ]
  then
    if ! helm get notes stackgres-operator --namespace stackgres > /dev/null
    then
      echo "Re-installing operator since not installed"
    else
      echo "Re-installing operator since has different values"
      echo
      echo "Values expected:"
      cat "$TARGET_PATH/operator-values.yaml"
      echo
      echo "Values found:"
      get_installed_operator_values
      echo
    fi
    k8s_webhook_cleanup
    helm_cleanup
    k8s_async_cleanup

    kubectl create namespace stackgres
    install_operator_vanilla -f "$TARGET_PATH/operator-values.yaml"
    wait_pods_running stackgres
    if helm get values -n stackgres stackgres-operator | grep -q externalOperatorIp \
      && helm get values -n stackgres stackgres-operator | grep -q externalOperatorPort
    then
      wait_services_available stackgres 2
    else
      wait_services_available stackgres 1
    fi
  fi
}