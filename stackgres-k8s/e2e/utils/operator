#!/bin/sh

operator_pull_policy() {
  echo $E2E_OPERATOR_PULL_POLICY
}

install_operator() {
  kubectl create namespace stackgres || true

  if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" = true ]
  then
    set_up_private_repo
    install_operator_from_private_repo "$@"
    return
  fi

  helm install stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" \
    --set-string image.name="${IMAGE_NAME%:*}" --set-string image.tag="${IMAGE_NAME#*:}" \
    --set-string "image.pullPolicy=$(operator_pull_policy)" \
    "$@"
}

install_operator_from_private_repo() {
  PRIVATE_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/operator"
  helm install stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" \
      --set-string image.name="$PRIVATE_IMAGE_NAME" --set-string image.tag="$IMAGE_TAG" \
      --set-string serviceAccount.repoCredentials="regcred" \
      --set-string "image.pullPolicy=$(operator_pull_policy)" \
      "$@"
}

set_up_private_repo(){
  if ! aws ecr describe-repositories --repository-name "stackgres/operator" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/operator" 
  fi  
  
  export PRIVATE_REPO_URI=$(get_private_repo_uri)
  export PRIVATE_IMAGE_NAME="$PRIVATE_REPO_URI/$IMAGE_NAME"

  get_private_repo_password | docker login --username AWS --password-stdin "$PRIVATE_REPO_URI"
  
  docker tag "$IMAGE_NAME" "$PRIVATE_IMAGE_NAME"

  echo "$PRIVATE_IMAGE_NAME"

  docker push "$PRIVATE_IMAGE_NAME"  

  kubectl get secret -n stackgres regcred > /dev/null && kubectl delete secret -n stackgres regcred
  kubectl create secret docker-registry -n stackgres regcred \
    --docker-server="$PRIVATE_REPO_URI" \
    --docker-username="AWS" \
    --docker-password="$(get_private_repo_password)"
}

get_private_repo_uri() {
  local AWS_ACCOUNT_ID=$(aws --output=text sts get-caller-identity | awk '{print $1}')
  local AWS_REGION=$(aws configure get region)

  echo "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
}

get_private_repo_password() {
  echo "$(aws ecr get-login-password)"
}

upgrade_operator() {
  if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" = true ]
  then
    upgrade_operator_from_private_repo "$@"
    return
  fi

  helm upgrade stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" \
    --reuse-values \
    --set-string image.name="${IMAGE_NAME%:*}" --set-string image.tag="${IMAGE_NAME#*:}" \
    --set-string "image.pullPolicy=$(operator_pull_policy)" \
    "$@"
}

upgrade_operator_from_private_repo() {
  PRIVATE_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/operator"
  helm install stackgres-operator --namespace stackgres "$OPERATOR_CHART_PATH" \
      --set-string image.name="$PRIVATE_IMAGE_NAME" --set-string image.tag="$IMAGE_TAG" \
      --set-string serviceAccount.repoCredentials="regcred" \
      --set-string "image.pullPolicy=$(operator_pull_policy)" \
      "$@"
}

