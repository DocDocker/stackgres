#!/bin/sh

remove_distributed_logs() {
  local NAME="$1"
  local NAMESPACE="$2"

  echo "Deleting release $NAME" 
  helm get manifest "$NAME" --namespace "$NAMESPACE" \
    | kubectl delete --namespace "$NAMESPACE" --ignore-not-found -f -
  helm get hooks "$NAME" --namespace "$NAMESPACE" \
    | kubectl delete --namespace "$NAMESPACE" --ignore-not-found -f -
  helm delete "$NAME" --namespace "$NAMESPACE"
}

remove_distributed_logs_if_exists() {
  local NAME="$1"
  local NAMESPACE="$2"

  if kubectl get sgdistributedlogs "$NAME" --namespace "$NAMESPACE" > /dev/null 2>&1
  then
    kubectl delete sgdistributedlogs "$NAME" --namespace "$NAMESPACE"
  fi
}

create_or_replace_distributed_logs() {
  local NAME="$1"
  local NAMESPACE="$2"
  local VOLUME_SIZE="$3"

  if kubectl get sgdistributedlogs "$NAME" --namespace "$NAMESPACE" > /dev/null 2>&1
  then
    get_distributed_logs_cr "$NAME" "$NAMESPACE" "$VOLUME_SIZE" \
      | kubectl apply --namespace "$NAMESPACE" -f -
  else
    create_namespace_if_not_exists "$NAMESPACE"
    get_distributed_logs_cr "$NAME" "$NAMESPACE" "$VOLUME_SIZE" \
      | kubectl create --namespace "$NAMESPACE" -f -
  fi
}

get_distributed_logs_cr() {
  local NAME="$1"
  local NAMESPACE="$2"
  local VOLUME_SIZE="$3"

  cat << EOF
apiVersion: stackgres.io/v1beta1
kind: SGDistributedLogs
metadata:
  name: "$NAME"
  namespace: "$NAMESPACE"
spec:
  persistentVolume:
    size: "$VOLUME_SIZE"
EOF
}