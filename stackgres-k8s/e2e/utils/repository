#!/bin/sh

set_up_private_repository() {
  if ! aws ecr describe-repositories --repository-name "stackgres/operator" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/operator" 
  fi  
  
  if ! aws ecr describe-repositories --repository-name "stackgres/restapi" > /dev/null
  then
    aws ecr create-repository --repository-name "stackgres/restapi" 
  fi  

  export PRIVATE_REPO_URI=$(get_private_repository_uri)
  export PRIVATE_OPERATOR_IMAGE_NAME="$PRIVATE_REPO_URI/$OPERATOR_IMAGE_NAME"
  export PRIVATE_RESTAPI_IMAGE_NAME="$PRIVATE_REPO_URI/$RESTAPI_IMAGE_NAME"

  get_private_repository_password | docker login --username AWS --password-stdin "$PRIVATE_REPO_URI"
  
  docker tag "$OPERATOR_IMAGE_NAME" "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker tag "$RESTAPI_IMAGE_NAME" "$PRIVATE_RESTAPI_IMAGE_NAME"

  docker push "$PRIVATE_OPERATOR_IMAGE_NAME"
  docker push "$PRIVATE_RESTAPI_IMAGE_NAME"

  if kubectl get namespace stackgres > /dev/null
  then  
    kubectl get secret -n stackgres regcred > /dev/null && kubectl delete secret -n stackgres regcred
    kubectl create secret docker-registry -n stackgres regcred \
      --docker-server="$PRIVATE_REPO_URI" \
      --docker-username="AWS" \
      --docker-password="$(get_private_repository_password)"
  else
    kubectl create namespace stackgres
    kubectl create secret docker-registry -n stackgres regcred \
    --docker-server="$PRIVATE_REPO_URI" \
    --docker-username="AWS" \
    --docker-password="$(get_private_repository_password)"
  fi
}

get_private_repository_uri() {
  local AWS_ACCOUNT_ID=$(aws --output=text sts get-caller-identity | awk '{print $1}')
  local AWS_REGION=$(aws configure get region)

  echo "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
}

get_private_repo_password() {
  echo "$(aws ecr get-login-password)"
}

load_cached_images_from_local_repository() {
  cat "$TARGET_PATH/pulled-images" \
    | cut -d : -f 2-3 | sort | uniq \
    | (
      while read IMAGE_NAME
      do
        if docker image inspect "$IMAGE_NAME" >/dev/null 2>&1
        then
          load_image_k8s "$IMAGE_NAME"
        else
          echo "Image $IMAGE_NAME not found in cache!"
        fi
      done
      )
}

cache_pulled_images_to_local_repository() {
  event_watch \
    | stdbuf -o0 grep '\sSuccessfully pulled image "[^"]\+"$' \
    | stdbuf -o0 sed 's/.*\sSuccessfully pulled image "\([^"]\+\)"$/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected pulled image $IMAGE_NAME to k8s env $E2E_ENV"
        if [ ! -f "$TARGET_PATH/pulled-images" ]
        then
          rm -f "$TARGET_PATH/pulled-images"
          touch "$TARGET_PATH/pulled-images"
        fi
        if [ "$(grep -F "$IMAGE_NAME" "$TARGET_PATH/pulled-images" \
          | sort | tail -n 1 | cut -d : -f 1 | grep '\d+' || echo 0)" \
          -lt "$(($(date +%s)-30))" ]
        then
          echo "Pulling image $IMAGE_NAME to cache"
          if docker pull -q "$IMAGE_NAME"
          then
            echo "$(date +%s):$IMAGE_NAME" >> "$TARGET_PATH/pulled-images"
          else
            echo "Pulling image $IMAGE_NAME to cache failed!"
          fi
        fi
      done
      )
}

load_failed_to_pull_images_from_local_repository() {
  event_watch \
    | stdbuf -o0 grep '\sFailed to pull image "[^"]\+":.*$' \
    | stdbuf -o0 sed 's/.*\sFailed to pull image "\([^"]\+\)":.*/\1/' \
    | (
      while read IMAGE_NAME
      do
        echo "Detected failed to pull image $IMAGE_NAME to k8s env $E2E_ENV"
        if docker image inspect "$IMAGE_NAME" >/dev/null 2>&1
        then
          load_image_k8s "$IMAGE_NAME"
        else
          echo "Image $IMAGE_NAME not found in cache!"
        fi
      done
      )
}