#!/bin/sh

KIND_NAME="${KIND_NAME:-kind}"

export KIND_NAME

update_k8s_config() {
  mkdir -p "$HOME/.kube"
  if [ "$K8S_FROM_DIND" = true ]
  then
    kind get kubeconfig --name "$KIND_NAME" --internal \
      > "$HOME/.kube/config-$KIND_NAME"
  else
    kind get kubeconfig --name "$KIND_NAME" \
      > "$HOME/.kube/config-$KIND_NAME"
  fi

  (
  export KUBECONFIG="${KUBECONFIG:-$HOME/.kube/config}"
  if [ -s "$KUBECONFIG" ]
  then
    KUBECONFIG="$HOME/.kube/config-$KIND_NAME":"$KUBECONFIG" \
      kubectl config view --raw > "$HOME/.kube/config-merged"
    mv "$HOME/.kube/config-merged" "$KUBECONFIG"
  else
    mv "$HOME/.kube/config-$KIND_NAME" "$KUBECONFIG"
  fi
  )
}

reuse_k8s() {
  if ! kind get clusters | grep -q "^$KIND_NAME$" \
      || ! docker inspect "$KIND_NAME-control-plane" -f '{{ .State.Status }}' | grep -q 'running'
  then
    echo "Can not reuse kind environment $KIND_NAME"
    reset_k8s
    return
  fi

  echo "Reusing kind environment $KIND_NAME"

  update_k8s_config
}

reset_k8s() {
  echo "Setting up kind environment $KIND_NAME..."

  kind delete cluster --name "$KIND_NAME" || true
  cat << EOF > "$TARGET_PATH/kind-config.yaml"
  kind: Cluster
  apiVersion: kind.sigs.k8s.io/v1alpha3
  nodes:
  - role: control-plane
  - role: worker
  - role: worker
EOF

  kind create cluster --name "$KIND_NAME" --config "$TARGET_PATH/kind-config.yaml" \
    --image "kindest/node:v${E2E_KUBERNETES_VERSION}"

  if [ "$KIND_INSTALL_NFS" = "true" ]
  then
    local pids
  
    kind get nodes --name "$KIND_NAME" \
      | xargs -r -n 1 -I % -P 0 sh -ec "
      docker exec -t '%' sh -c 'DEBIAN_FRONTEND=noninteractive apt-get update -y -qq < /dev/null > /dev/null'
      docker exec -t '%' sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y -qq nfs-common < /dev/null > /dev/null'
      "
  fi

  update_k8s_config

  if echo "$E2E_KUBERNETES_VERSION" | grep -q '^1\.12\.'
  then
    # Patch coredns to version 1.3.1 (see https://github.com/coredns/coredns/issues/2391)
    kubectl patch deployment -n kube-system coredns --type json \
      --patch '[{"op":"replace","path":"/spec/template/spec/containers/0/image","value":"k8s.gcr.io/coredns:1.3.1"}]'
  fi

  echo "...done"
}

delete_k8s() {
  echo "Deleting kind environment $KIND_NAME..."

  kind delete cluster --name "$KIND_NAME" || true

  rm -f "$(kind get kubeconfig-path --name "$KIND_NAME")"

  echo "...done"
}

load_operator_k8s() {
  echo "Loading operator image $IMAGE_NAME in kind environemnt $KIND_NAME..."

  kind load docker-image --name "$KIND_NAME" "$IMAGE_NAME"

  echo "...done"
}

load_certificate_k8s() {
  echo "Loading certificate $1 in kind environemnt $KIND_NAME..."

  echo "$KIND_NAME-control-plane" "$KIND_NAME-worker" "$KIND_NAME-worker2" \
    | tr ' ' '\n' | xargs -r -n 1 -I % -P 0 sh -ec "
      docker cp '$1' '%':/usr/local/share/ca-certificates/validator.crt
      docker exec -t '%' sh -c "update-ca-certificates"
      "

  echo "...done"
}
