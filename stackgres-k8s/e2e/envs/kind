#!/bin/sh

KIND_NAME="${KIND_NAME:-kind}"
KIND_NODES="${KIND_NODES:-1}"

export KIND_NAME
export KIND_NODES

update_k8s_config() {
  if cat /proc/1/cgroup | grep :memory | grep -E ":/$" > /dev/null
  then 
    echo "Running outside of a container"
    return
  else 
    echo "Running inside of a container"
  fi  
  mkdir -p "$HOME/.kube"
  if [ "$K8S_FROM_DIND" = true ]
  then
    local CONTAINER_NAME="$(docker inspect -f '{{.Name}}' "$(hostname)"|cut -d '/' -f 2)"
    docker inspect "$CONTAINER_NAME" \
      -f '{{ range $key,$value := .NetworkSettings.Networks }}{{ printf "%s\n" $key }}{{ end }}' \
      | grep -q '^kind$' \
      || docker network connect kind "$CONTAINER_NAME"
    local KIND_CONTROL_PLANE_IP="$(docker inspect "$KIND_NAME-control-plane" \
      -f '{{ .NetworkSettings.Networks.kind.IPAddress }}')"
    kind get kubeconfig --name "$KIND_NAME" --internal \
      | sed "s/$KIND_NAME-control-plane/$KIND_CONTROL_PLANE_IP/" \
      > "$HOME/.kube/config-$KIND_NAME"
  else
    kind get kubeconfig --name "$KIND_NAME" \
      > "$HOME/.kube/config-$KIND_NAME"
  fi

  (
  export KUBECONFIG="${KUBECONFIG:-$HOME/.kube/config}"
  if [ -s "$KUBECONFIG" ]
  then
    KUBECONFIG="$HOME/.kube/config-$KIND_NAME":"$KUBECONFIG" \
      kubectl config view --raw > "$HOME/.kube/config-merged"
    mv "$HOME/.kube/config-merged" "$KUBECONFIG"
  else
    mv "$HOME/.kube/config-$KIND_NAME" "$KUBECONFIG"
  fi
  )
}

reuse_k8s() {
  if ! kind get clusters | grep -q "^$KIND_NAME$" \
      || ! docker inspect "$KIND_NAME-control-plane" -f '{{ .State.Status }}' | grep -q 'running'
  then
    echo "Can not reuse kind environment $KIND_NAME"
    reset_k8s
    return
  fi

  echo "Reusing kind environment $KIND_NAME"

  update_k8s_config
}

reset_k8s() {
  echo "Setting up kind environment $KIND_NAME..."

  kind delete cluster --name "$KIND_NAME" || true
  if [ -z "$K8S_EXTRA_PORT" ]
  then
    cat << EOF > "$TARGET_PATH/kind-config.yaml"
  kind: Cluster
  apiVersion: kind.sigs.k8s.io/v1alpha3
  networking:
    apiServerAddress: "0.0.0.0"
  nodes:
  - role: control-plane
EOF
    for KIND_NODE in $(seq 2 "$KIND_NODES")
    do
      cat << EOF >> "$TARGET_PATH/kind-config.yaml"
  - role: worker
EOF
    done
  else
    cat << EOF > "$TARGET_PATH/kind-config.yaml"
  kind: Cluster
  apiVersion: kind.sigs.k8s.io/v1alpha3
  networking:
    apiServerAddress: "0.0.0.0"
  nodes:
  - role: control-plane 
    extraPortMappings:
    - containerPort: $(echo "$K8S_EXTRA_PORT" | cut -d : -f 1)
      hostPort: $(echo "$K8S_EXTRA_PORT" | cut -d : -f 2)
      listenAddress: "$(echo "$K8S_EXTRA_PORT" | cut -d : -f 3)"
      protocol: "$(echo "$K8S_EXTRA_PORT" | cut -d : -f 4)"
EOF
    for KIND_NODE in $(seq 2 "$KIND_NODES")
    do
      cat << EOF >> "$TARGET_PATH/kind-config.yaml"
  - role: worker
EOF
    done
  fi


  kind create cluster --name "$KIND_NAME" --config "$TARGET_PATH/kind-config.yaml" \
    --image "kindest/node:v${K8S_VERSION}"

  if [ "$KIND_INSTALL_NFS" = "true" ]
  then
    local pids
  
    kind get nodes --name "$KIND_NAME" \
      | xargs -r -n 1 -I % -P 0 sh -ec "
      docker exec -t '%' sh -c 'DEBIAN_FRONTEND=noninteractive apt-get update -y -qq < /dev/null > /dev/null'
      docker exec -t '%' sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y -qq nfs-common < /dev/null > /dev/null'
      "
  fi

  update_k8s_config

  if echo "$K8S_VERSION" | grep -q '^1\.12\.'
  then
    # Patch coredns to version 1.3.1 (see https://github.com/coredns/coredns/issues/2391)
    kubectl patch deployment -n kube-system coredns --type json \
      --patch '[{"op":"replace","path":"/spec/template/spec/containers/0/image","value":"k8s.gcr.io/coredns:1.3.1"}]'
  fi

  echo "...done"
}

delete_k8s() {
  echo "Deleting kind environment $KIND_NAME..."

  kind delete cluster --name "$KIND_NAME" || true

  rm -f "$(kind get kubeconfig-path --name "$KIND_NAME")"

  echo "...done"
}

load_operator_k8s() {
  echo "Loading operator image $IMAGE_NAME in kind environemnt $KIND_NAME..."

  kind load docker-image --name "$KIND_NAME" "$IMAGE_NAME"

  echo "...done"
}

load_certificate_k8s() {
  echo "Loading certificate $1 in kind environemnt $KIND_NAME..."

    kind get nodes --name "$KIND_NAME" \
      | xargs -r -n 1 -I % -P 0 sh -ec "
      docker cp '$1' '%':/usr/local/share/ca-certificates/validator.crt
      docker exec -t '%' sh -c "update-ca-certificates"
      "

  echo "...done"
}

excluded_namespaces() {
  echo 'local-path-storage'
}

get_k8s_versions() {
  cat << EOF
1.11.10
1.12.10
1.13.12
1.14.10
1.14.9
1.15.11
1.15.6
1.16.3
1.16.9
1.17.5
1.18.2
EOF
}
