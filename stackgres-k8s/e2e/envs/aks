#!/bin/sh

AZ_LOCATION="${AZ_LOCATION:-northeurope}"
AZ_RESOURCE_GROUP="${AZ_RESOURCE_GROUP:-stackgres-e2e}"
AZ_K8S_NAME="${AZ_K8S_NAME:-stackgres}"
KUBERNETES_VERSION="${KUBERNETES_VERSION:-1.13.12}"
AZ_NODE_SIZE="${AZ_NODE_SIZE:-Standard_F2}"
AZ_NODE_COUNT="${AZ_NODE_COUNT:-5}"
AZ_REGISTRY="${AZ_REGISTRY:-stackgrese2e}"

if [ "$AZ_NODE_SIZE" = "Standard_F2" ] && [ "$E2E_PARALLELISM" -gt "$AZ_NODE_COUNT" ]
then
  echo "Warning: to avoid false failures is recommended to match the E2E_PARALLELISM with AZ_NODE_COUNT"
fi

if [ "$KUBERNETES_VERSION" = 1.12.10 ]
then
  >&2 echo "Warning: using kubernetes version 1.13.11 since e2e default 1.12.10 is no longer available for aks"
  KUBERNETES_VERSION=1.13.11
fi

set_up_resource_group(){
  RS_EXISTS=$(az group exists --name "$AZ_RESOURCE_GROUP")
  if [ "$RS_EXISTS" = true ]
  then
    echo "Deleting previous resource group"
    az group delete --name "$AZ_RESOURCE_GROUP" --yes
  fi
  echo "creating resource group $AZ_RESOURCE_GROUP"

  az group create --name "$AZ_RESOURCE_GROUP" --location "$AZ_LOCATION"

}

reset_k8s() {
    
  set_up_resource_group

  if [ -z "$SP_APP_ID" ] || [ -z "$SP_PASSWORD" ]
  then
    az aks create --name "$AZ_K8S_NAME" --resource-group "$AZ_RESOURCE_GROUP" \
      --kubernetes-version "$KUBERNETES_VERSION" --node-count "$AZ_NODE_COUNT" \
      --node-vm-size "$AZ_NODE_SIZE"
  else
    az aks create --name "$AZ_K8S_NAME" --resource-group "$AZ_RESOURCE_GROUP" \
      --kubernetes-version "$KUBERNETES_VERSION" --node-count "$AZ_NODE_COUNT" \
      --node-vm-size "$AZ_NODE_SIZE" \
      --service-principal "$SP_APP_ID" \
      --client-secret "$SP_PASSWORD"
  fi    

  az aks get-credentials --name "$AZ_K8S_NAME" --resource-group "$AZ_RESOURCE_GROUP" --overwrite-existing
}

reuse_k8s() {
  if az aks show --name "$AZ_K8S_NAME" --resource-group "$AZ_RESOURCE_GROUP" > /dev/null
  then
    echo "Reusing aks environment $AZ_K8S_NAME"
    az aks get-credentials --name "$AZ_K8S_NAME" --resource-group "$AZ_RESOURCE_GROUP"
  else
    echo "Cannot resuse ask environment $AWS_NAME"
    reset_k8s
  fi
}

delete_k8s(){
   az group delete --name "$AZ_RESOURCE_GROUP" --yes
}

load_operator_k8s() {
  echo "Loading operator image $IMAGE_NAME in aks environemnt $AZ_K8S_NAME..."
  echo "Cannot load images to $AZ_K8S_NAME.  Using public images :("  

}

operator_pull_policy() {
  echo IfNotPresent
}
