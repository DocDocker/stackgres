#!/bin/sh

e2e_test_install() {
  if [ "$E2E_ENV" = "kind" ]
  then
    cat << EOF > "$LOG_PATH/minio-affinity.yaml"
minio:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "kubernetes.io/hostname"
              operator: "In"
              values: [ "${KIND_NAME}-worker" ]
EOF
  else
    > "$LOG_PATH/minio-affinity.yaml"
  fi

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    -f "$LOG_PATH/minio-affinity.yaml"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 4

  # Avoid backups before waiting for pods (since backup pods could biase the wait)
  kubectl patch sgbackupconfig -n "$CLUSTER_NAMESPACE" backupconf --type json \
    --patch '[{"op":"replace","path":"/spec/fullSchedule","value":"*/1 * * * *"}]'
}

e2e_test() {
  run_test "Checking that backup is working before switchover" check_backup_before_switchover

  run_test "Checking that switchover is working" check_switchover

  run_test "Checking that backup is working after switchover" check_backup_after_switchover

  run_test "Checking that backup is working after killing storage provider service" check_backup_after_kill_storage_provider_service
}

check_backup_before_switchover() {
  check_backup 0
}

check_backup_after_switchover() {
  check_backup 1
}

check_backup_after_kill_storage_provider_service() {
  kubectl get pod -n "$CLUSTER_NAMESPACE" -o name | grep "^pod/$CLUSTER_NAME-minio-" \
    | xargs -r -n 1 -I % kubectl delete -n "$CLUSTER_NAMESPACE" %

  check_backup 1
}

check_backup() {
  NODE="$1"
  CURRENT_WAL_FILE="$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"$NODE" -c postgres-util -- \
    psql -t -A -U postgres -p 5435 -c \
    'SELECT r.file_name from pg_walfile_name_offset(pg_current_wal_lsn()) as r')"
  wait_until eval '[ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"$NODE" -c postgres-util -- \
      psql -t -A -U postgres -p 5435 -c \
      "SELECT r.file_name from pg_walfile_name_offset(pg_switch_wal()) as r")" != "$CURRENT_WAL_FILE" ]'

  if wait_until kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"$NODE" -c patroni -- \
    exec-with-env backup -- wal-g wal-fetch "$CURRENT_WAL_FILE" "/tmp/$CURRENT_WAL_FILE"
  then
    echo "SUCCESS. The WAL is available"
  else
    echo "FAIL. The WAL is not available"
    return 1
  fi

  if wait_until eval '[ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" \
      -o custom-columns=BACKUP_NAME:.status.name,PHASE:.status.phase,HOSTNAME:.status.hostname \
      | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | wc -l)" -gt 0 ]'
  then
    echo "SUCCESS. The backup CR is available"
  else
    echo "FAIL. The backup CR is not available"
    return 1
  fi

  BACKUP_NAME="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" \
    -o custom-columns=BACKUP_NAME:.status.name,PHASE:.status.phase,HOSTNAME:.status.hostname \
    | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | tail -n 1 | cut -d ' ' -f 1)"
  
  if [ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-${NODE}" -c patroni -- \
      exec-with-env backup -- wal-g backup-list | grep "^$BACKUP_NAME " | wc -l)" -gt 0 ]
  then
    echo "SUCCESS. The full backup is available"
  else
    echo "FAIL. The full backup is not available"
    return 1
  fi

  BACKUP_NAME="${CLUSTER_NAME}-${NODE}-$(shuf -i 0-65535 -n 1)"

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1alpha1
kind: StackGresBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE"
  name: "$BACKUP_NAME"
spec:
  cluster: "$CLUSTER_NAME"
  isPermanent: false
EOF

  if wait_until eval '[ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
      -o custom-columns=BACKUP_NAME:.status.name,PHASE:.status.phase,HOSTNAME:.status.hostname \
      | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | wc -l)" -gt 0 ]'
  then
    echo "SUCCESS. The created backup CR did complete"
  else
    echo "FAIL. The created backup CR did not complete"
    return 1
  fi

  ACTUAL_BACKUP_NAME="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
    -o custom-columns=BACKUP_NAME:.status.name,PHASE:.status.phase,HOSTNAME:.status.hostname \
    | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | tail -n 1 | cut -d ' ' -f 1)"

  if [ -z "$ACTUAL_BACKUP_NAME" ]
  then
    echo "FAIL. Backup name not found"
    return 1
  fi

  if [ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-${NODE}" -c patroni -- \
      exec-with-env backup -- wal-g backup-list | grep "^$ACTUAL_BACKUP_NAME " | wc -l)" -gt 0 ]
  then
    echo "SUCCESS. The full backup of created CR is available"
  else
    echo "FAIL. The full backup of created CR is not available"
    return 1
  fi

  check_is_permanent_value false

  kubectl patch sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" --type json \
    --patch '[{"op":"replace","path":"/spec/isPermanent","value":true}]'

  wait_until check_is_permanent_value true

  local DEFAULT_ANNOTATION=$(kubectl get sgbackup -n $CLUSTER_NAMESPACE $BACKUP_NAME -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')

  if [ -z $DEFAULT_ANNOTATION ] || [ "$DEFAULT_ANNOTATION" = "null" ]
  then
    echo "Fail. Default annotations not created"
    return 1
  else
    echo "Success. Defaults annotations created"
  fi

  kubectl delete sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME"

  if wait_until eval '[ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-${NODE}" -c patroni -- \
      exec-with-env backup -- wal-g backup-list | grep "^$ACTUAL_BACKUP_NAME " | wc -l)" -eq 0 ]'
  then
    echo "SUCCESS. The full backup of deleted CR has been removed"
  else
    echo "FAIL. The full backup of deleted CR has not been removed"
    return 1
  fi
}

check_is_permanent_value() {
  ACTUAL_IS_PERMANENT="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
    -o custom-columns=IS_PERMANENT:.status.isPermanent,PHASE:.status.phase,HOSTNAME:.status.hostname \
    | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | tail -n 1 | cut -d ' ' -f 1)"

  if [ "$ACTUAL_IS_PERMANENT" != "$1" ]
  then
    echo "FAIL. Backup /status/isPermanent expected to be $1 but was $ACTUAL_IS_PERMANENT"
    return 1
  else
    echo "SUCCESS. Backup /status/isPermanent was $1"
  fi
}

check_switchover() {
  if kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 -c patroni -- \
    patronictl switchover --master "$CLUSTER_NAME"-0 --candidate "$CLUSTER_NAME"-1 --force
  then
    echo "SUCCESS. The switchover has been performed"
  else
    echo "FAIL. The switchover operation failed"
    return 1
  fi

  if wait_until run_query -i 0 -p 5432
  then
    echo "SUCCESS. The replica becomed available"
  else
    echo "FAIL. The replica is not available"
    return 1
  fi

  if ! run_query -i 1 -p 5432 -q "'SELECT pg_is_in_recovery()'" | grep -q '^t$'
  then
    echo "SUCCESS. The primary is now the node at index 1"
  else
    echo "FAIL. The node at index 1 is not the primary"
    return 1
  fi

  if ! run_query -i 0 -p 5432 -q "'SELECT pg_is_in_recovery()'" | grep -q '^f$'
  then
    echo "SUCCESS. The replica is now the node at index 0"
  else
    echo "FAIL. The node at index 0 is not a replica"
    return 1
  fi
}

