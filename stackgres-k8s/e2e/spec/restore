#!/bin/sh

e2e_test_install() {
  cat << EOF > "$LOG_PATH/minio-values.yaml"
persistence:
  enabled: true
  size: 2Gi
buckets:
  - name: $CLUSTER_NAME-backup
    policy: none
    purge: true
EOF

  kubectl create namespace "$CLUSTER_NAME-backup"
  helm install "$CLUSTER_NAME-backup-minio" stable/minio \
    --namespace "$CLUSTER_NAMESPACE-backup" -f "$LOG_PATH/minio-values.yaml"

  SPEC_VALUES_FILE="$SPEC_FILE.backup.values.yaml"

  create_or_replace_cluster "$CLUSTER_NAME-backup" "$CLUSTER_NAMESPACE-backup" 1

  wait_pods_running "$CLUSTER_NAMESPACE-backup" 2

  create_mock_data

  BACKUP_NAME="$CLUSTER_NAME-backup-0-$(shuf -i 0-65535 -n 1)"

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1beta1
kind: SGBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE-backup"
  name: "$BACKUP_NAME"
spec:
  cluster: "$CLUSTER_NAME-backup"
  isPermanent: true
EOF
  
  wait_until is_backup_phase "Completed"

  BACKUP_UID=$(kubectl get sgbackups.stackgres.io -n "$CLUSTER_NAMESPACE-backup" $BACKUP_NAME -o=jsonpath='{.metadata.uid}')  

  SPEC_VALUES_FILE="$SPEC_FILE.values.yaml"

  kubectl create namespace "$CLUSTER_NAMESPACE" || true

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 --set cluster.restore.fromBackup="$BACKUP_UID"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

is_backup_phase() {
  [ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE-backup" "$BACKUP_NAME" -o=jsonpath='{.status.phase}')" = "$1" ]
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" || true
  helm_cleanup_chart "$CLUSTER_NAME-backup" "$CLUSTER_NAMESPACE" || true
  helm_cleanup_chart "$CLUSTER_NAME-backup-minio" "$CLUSTER_NAMESPACE" || true
  helm_cleanup_chart "$CLUSTER_NAME-backup-minio2" "$CLUSTER_NAMESPACE" || true

  k8s_cleanup_namespace "$CLUSTER_NAMESPACE" || true
  k8s_cleanup_namespace "$CLUSTER_NAMESPACE-backup" || true
}

e2e_test() {
  run_test "Check that data was restored on primary node" check_init_data
  run_test "Check that data was restored on replica node" check_replica_data
  run_test "Check that replication is still working" check_replication  
  run_test "Check that backup is compatible with cluster" check_backup_pg_version
  run_test "Check that restoration default values" check_restore_default_values
}


create_mock_data() {
  run_query -p 5432 -h "$CLUSTER_NAME-backup-primary" -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "'CREATE DATABASE test;'"
  run_query -p 5432 -h "$CLUSTER_NAME-backup-primary" -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "'CREATE TABLE fibonacci(num integer);'" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME-backup-primary" -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "'INSERT INTO fibonacci(num) VALUES (1);'" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME-backup-primary" -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "'INSERT INTO fibonacci(num) VALUES (2);'" -d "test"
  run_query -p 5432 -h "$CLUSTER_NAME-backup-primary" -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "'INSERT INTO fibonacci(num) VALUES (3);'" -d "test"
}

check_init_data() {
  if run_query -p 5432 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 0 -q "' SELECT num FROM fibonacci ORDER BY num;'" -d "test" \
    | tr -d '\n' \
    | grep -q "^123$"
  then
    echo "SUCCESS: restore primary db restored successfully"
  else
    echo "FAIL: primary db not restored"
    return 1
  fi

}

check_replica_data() {
  if run_query -p 5432 -h "$CLUSTER_NAME-replica" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 1 -q "' SELECT num FROM fibonacci ORDER BY num;'" -d "test" \
    | tr -d '\n' \
    | grep -q "^123$"
  then
    echo "SUCCESS: restore replica db restored successfully"
  else
    echo "FAIL: replica db not restored"
    return 1
  fi

}

check_replication() {
  local PRIMARY_RESPONSE
  local REPLICA_RESPONSE

  run_query -p 5432 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 0 -q "'INSERT INTO fibonacci(num) VALUES (5);'" -d test
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 0 -q "'INSERT INTO fibonacci(num) VALUES (8);'" -d test
  run_query -p 5432 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 0 -q "'INSERT INTO fibonacci(num) VALUES (13);'" -d test

  PRIMARY_RESPONSE="$(run_query -p 5432 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 0 -q "' SELECT num FROM fibonacci ORDER BY num;'" -d "test" | tr -d '\n')"
  REPLICA_RESPONSE="$(run_query -p 5432 -h "$CLUSTER_NAME-replica" -c "$CLUSTER_NAME" -n $CLUSTER_NAMESPACE -i 1 -q "' SELECT num FROM fibonacci ORDER BY num;'" -d "test" | tr -d '\n')"

  if [ "$PRIMARY_RESPONSE" = "1235813" ]
  then
    if [ "$PRIMARY_RESPONSE" = "$REPLICA_RESPONSE" ]
    then
      echo "SUCCESS: replication is working"
      return 0
    else
      echo "FAIL: replication is not working. The records don't match between primary and replica for the fibonacci table"
      return 1
    fi
  else
    echo "FAIL: inserts on the primary where not sucessful."
    return 1
  fi

}

check_backup_pg_version() {
  ALTERNATIVE_MAYOR_PG_VERSION="11"
  ALTERNATIVE_PG_VERSION="$ALTERNATIVE_MAYOR_PG_VERSION.7"

  cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1beta1
kind: SGPostgresConfig
metadata:
  name: pgconfig-alter
  namespace: $CLUSTER_NAMESPACE
spec:
  pgVersion: '$ALTERNATIVE_MAYOR_PG_VERSION'
  postgresql.conf:
    wal_compression: "on"
EOF

  cat << EOF > "$LOG_PATH/alter-restore-cluster.yaml"
apiVersion: stackgres.io/v1beta1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME-alter
  namespace: $CLUSTER_NAMESPACE
spec:
  instances: 1
  postgresVersion: '$ALTERNATIVE_PG_VERSION'
  volumeSize: '512Mi'
  sgPostgresConfig: pgconfig-alter
  restore:
    downloadDiskConcurrency: 1
    fromBackup: $BACKUP_UID
EOF

  if ERROR_MESSAGE="$(kubectl apply -f $LOG_PATH/alter-restore-cluster.yaml 2>&1)"
  then
    echo "ERROR: It should not be able to install a cluster with postgres version that is different than the backup pg version"
    return 1
  else
    echo "SUCCESS: Cluster was not created"
  fi

  if echo "$ERROR_MESSAGE" | grep -q "Cannot restore from backup $BACKUP_UID"
  then
    echo "SUCCESS: Error message was the expected"
  else 
    echo "FAIL: Unexpected error message $ERROR_MESSAGE"
    return 1
  fi
}

check_restore_default_values(){

  kubectl delete sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" 

  cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1beta1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  instances: 1
  postgresVersion: 'latest'
  volumeSize: '128Mi'
  restore:
    fromBackup: $BACKUP_UID
EOF

  assert_default_value "downloadDiskConcurrency" "1"

}

assert_default_value(){
  FIELD=$1
  EXPECTED_VALUE=$2

  if ACTUAL_VALUE=$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o=jsonpath="{.spec.restore.$FIELD}")
  then
    if [ "$ACTUAL_VALUE" = "$EXPECTED_VALUE" ]
    then
      echo "Success. Default value for field $FIELD is the expected"
    else
      echo "Fail. Default value is not the expected. Expected: $EXPECTED_VALUE. Actual: $ACTUAL_VALUE"
      return 1
    fi
  else
    echo "Fail. Default value for field $FIELD not found"
    return 1
  fi
    
}

