#!/bin/sh

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup
}

e2e_test_uninstall() {
  delete_operator
  install_operator
  wait_pods_running "$OPERATOR_NAMESPACE" 2
}

e2e_test() {
  run_test "Check that operator can be installed" check_operator_install
  run_test "Check that operator can be upgrade with same values" check_operator_upgrade
  run_test "Check that operator can be deleted" check_operator_delete
  run_test "Check that operator can be installed from outside" check_operator_install_outside
  run_test "Check that operator can be installed with load balancer" check_operator_install_load_balancer
  run_test "Check that operator can be installed with the '--wait' option" check_operator_install_with_wait
}

check_operator_install() {
  install_operator
}

check_operator_upgrade() {
  upgrade_operator
}

check_operator_delete() {
  delete_operator
}

check_operator_install_outside() {
  delete_operator

  install_operator --set-string service.type=NodePort --set service.nodePort=31111
}

check_operator_install_load_balancer() {
  delete_operator

  install_operator --set service.loadBalancer.enabled=true
}

check_operator_install_with_wait() {
  delete_operator

  install_operator \
    --wait

  for app in operator restapi; do
    if kubectl wait --timeout 0 --for=condition=Ready -n "$OPERATOR_NAMESPACE" -l app="stackgres-${app}" pod; then
      echo "SUCCESS. The stackgres '${app}' pod was ready after using --wait parameter."
      continue
    fi

    echo "FAILED. The stackgres '${app}' pod was not ready after using --wait parameter."
    return 1
  done
}