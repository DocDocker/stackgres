#!/bin/sh

test_install() {
  PROFILE="size-xs"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 --set cluster.create=false --set cluster.profile=$PROFILE

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE  -o json \
   | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)'\
    > "$LOG_PATH/default-profile.json"

  kubectl delete sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE
}

test_after_all() {
  unset PROFILE
}

test() {
  run_test "Check that a created profile can be accessed directly through the API" check_profile_directly

  run_test "Check that a created profile is included in the response" check_profile_in_list

  run_test "Check that a profile was removed from the list of profiles after its deletion" check_profile_removed_from_list

  run_test "Check that a profile was removed from direct access after its deletion" check_profile_deletion_directly

  run_test "Profile creation through the API" test_profile_create_with_api

  run_test "Check that a profile created with the API is visible" api_created_cluster_visible

  run_test "Profile update with the api" test_update_profile_with_api

  run_test "Check that profile changes are reflected in the api" test_api_updated_profile_is_visible

  run_test "Check that profile deletions with the API are reflected in the API" test_api_delete_profile_is_invible

  run_test "Check profile deletion with api" test_delete_profile_with_api
}

create_profile() {
  cat "$LOG_PATH/default-profile.json" | kubectl apply -f -

  while ! kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE
  do
    sleep 2
  done
}

delete_profile_only() {
  echo "Deleting profile if there is any"
  if kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE
  then

    echo "Profile $PROFILE found, deleting..."

    kubectl delete sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE

    while kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE
    do
      echo "Profile $PROFILE deleted..."
      sleep 2
    done
  else
    echo "No profile found"
  fi
}

check_profile_in_list() {
  create_profile
  local PROFILE_IN_RESPONSE
  PROFILE_IN_RESPONSE=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\") | select ( .metadata.name == \"$PROFILE\")" \
    | run_jq '.metadata.name' -r)

  echo "$PROFILE_IN_RESPONSE"
  if [ "$PROFILE_IN_RESPONSE" = "$PROFILE" ]
  then
    echo "Cluster $PROFILE included in json response"
    return 0
  else
    echo "Cluster $PROFILE not included in json response"
    return 1
  fi
}

get_profile_status() {
  local HTTP_STATUS
  HTTP_STATUS=$(run_curl -r "stackgres/profile/$CLUSTER_NAMESPACE/$PROFILE"  -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")
  echo $HTTP_STATUS
}

check_profile_directly() {
  create_profile
  local HTTP_STATUS
  HTTP_STATUS=$(get_profile_status)

  if [ $HTTP_STATUS -eq 200 ]
  then
    echo "Profile $PROFILE was found by the api"
    return 0
  else
    echo "Profile $PROFILE was not found by the api"
    return 1
  fi
}

check_profile_removed_from_list() {
  delete_profile_only
  local PROFILE_IN_RESPONSE

  PROFILE_IN_RESPONSE=$(run_curl -r "stackgres/profile"  -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace = \"$CLUSTER_NAMESPACE\") | select ( .metadata.name = \"$PROFILE\")" \
    | run_jq '.metadata.name' -r)

  if [ "$PROFILE_IN_RESPONSE" = "$PROFILE" ]
  then
    echo "Profile $PROFILE wasn't removed from cache";
    return 1
  else 
    echo "Profile $PROFILE was removed from cache";
    return 0
  fi
}

check_profile_deletion_directly() {
  delete_profile_only
  local HTTP_STATUS
  HTTP_STATUS=$(run_curl -r "stackgres/profile/$CLUSTER_NAMESPACE/$PROFILE" -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")

  if [ $HTTP_STATUS -eq 404 ]
  then
    echo "Profile $PROFILE was not found by the api"
    return 0
  else
    echo "Profile $PROFILE was found by the api"
    return 1
  fi
}

create_profile_with_api() { 
  echo "Creating profile $PROFILE with the operator API"

  delete_profile_only

  local HTTP_STATUS

  echo "Sending creation request"

  if HTTP_STATUS=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-profile.json" -e '-X POST -w %{http_code} -o /dev/null')
  then 
    if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
    then
      echo "request acknowledged by the operator"
    else
      local ERROR_RESPONSE
      ERROR_RESPONSE=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-profile.json" -e '-X POST')
      echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
      return 1
    fi
  else
    echo "request failed"
  fi
}

test_profile_create_with_api() {
  create_profile_with_api

  sleep 2

  if kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE
  then
    echo "Profile created with the operator API"
  else
    echo "Profile wasn't created with the API"
    return 1
  fi
}

api_created_cluster_visible() {
  create_profile_with_api

  check_profile_directly
}



update_profile_memory_with_api() {
  local TMP_JSON
  local HTTP_STATUS

  TMP_JSON=$(mktemp)

  cat "$LOG_PATH/default-profile.json" | run_jq ".spec.memory = $1"  > "$TMP_JSON" && mv "$TMP_JSON" "$LOG_PATH/stackgres-profile.json"

  HTTP_STATUS=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/stackgres-profile.json" -e '-X PUT -w %{http_code} -o /dev/null')

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
  else
    local ERROR_RESPONSE
    ERROR_RESPONSE=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/stackgres-profile.json" -e '-X PUT')

    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_update_profile_with_api() {
  local PROFILE_MEMORY

  create_profile

  update_profile_memory_with_api '"1Gi"'

  PROFILE_MEMORY=$(kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE -o jsonpath='{.spec.memory}')
  if [ "$PROFILE_MEMORY" = "1Gi" ]
  then
    echo "Profile was updated"
  else
    echo "Profile was not updated"
    return 1
  fi
}

get_profile_from_api() {
  echo $(run_curl -r "stackgres/profile/$CLUSTER_NAMESPACE/$PROFILE" -n "$CLUSTER_NAMESPACE")
}

test_api_updated_profile_is_visible() {
  local PROFILE_MEMORY

  update_profile_memory_with_api '"1Gi"'

  PROFILE_MEMORY=$(get_profile_from_api | run_jq '.spec.memory' -r)

  if [ "$PROFILE_MEMORY" = "1Gi" ]
  then
    echo "Cluster updates are being reflected in the api"
  else
    echo "Cluster updates aren't being reflected in the api"
    return 1
  fi
}

delete_profile_with_api() {
  local HTTP_STATUS

  HTTP_STATUS=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-profile.json" -e '-X DELETE -w %{http_code} -o /dev/null')

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    return 0
  else

    ERROR_RESPONSE=$(run_curl -r "stackgres/profile" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-profile.json" -e '-X PUT')
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_delete_profile_with_api() {
  create_profile

  delete_profile_with_api

  if wait_until eval '! kubectl get sgprofiles.stackgres.io -n $CLUSTER_NAMESPACE $PROFILE'
  then
    echo "profile was deleted"
  else
    echo "profile was not deleted"
    return 1
  fi
}

test_api_delete_profile_is_invible() {
  local HTTP_STATUS

  create_profile

  delete_profile_with_api

  if wait_until eval '[ "$(get_profile_status)" = "404" ]'
  then
    echo "Profile removed from the API"
  else
    echo "Profile wasn't removed from the API"
    return 1
  fi
}

