#!/bin/sh

e2e_test_install() {
  kubectl create namespace "$CLUSTER_NAMESPACE"
  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
}

e2e_test() {
  run_test "Storage endpoint should be available" check_storage_classes_status
  run_test "Storage endpoint should return all kubernetes storage classes" check_storage_classes
}

check_storage_classes() {
  local STORAGE_CLASSES_IN_RESPONSE
  local STORAGE_CLASSES_IN_K8

  STORAGE_CLASSES_IN_RESPONSE=$(run_curl -r "stackgres/storageclass" -n $CLUSTER_NAMESPACE | run_jq 'length')

  STORAGE_CLASSES_IN_K8S=$(kubectl get storageclasses -o json | run_jq '.items | length')

  if [ "$STORAGE_CLASSES_IN_RESPONSE" = "$STORAGE_CLASSES_IN_K8S" ]
  then
    echo "Success. Storage classes endpoint returned all storage classes"
  else
    echo "Fail. Storage classes endpoint did not return all storage classes. Expected $STORAGE_CLASSES_IN_K8S, actual $STORAGE_CLASSES_IN_K8S"
  fi
}


get_storage_classes_status() {
  run_curl -r "stackgres/storageclass" -n $CLUSTER_NAMESPACE -e "-LI -o /dev/null -w %{http_code}"
}

check_storage_classes_status() {
  local HTTP_STATUS

  HTTP_STATUS="$(get_storage_classes_status)"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Success. Storage classes endpoint is available"
  else
    echo "Fail. Storage classes endpoint is not available"
    return 1
  fi
}


