#!/bin/sh

e2e_test_install() {
  BACKUPCONF="backupconf"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 --set cluster.create=false --set cluster.backupconfig="$BACKUPCONF" \
    --set config.backup.create=true --set config.backup.minio.create=false \
    --set-string config.backup.s3compatible.bucket=test \
    --set-string config.backup.s3compatible.accessKey.name=test \
    --set-string config.backup.s3compatible.accessKey.key=test \
    --set-string config.backup.s3compatible.secretKey.name=test \
    --set-string config.backup.s3compatible.secretKey.key=test

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  DEFAULT_BACKUPCONFIG_CR=$(kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"  -o json \
    | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation)
      | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')
  echo "$DEFAULT_BACKUPCONFIG_CR" > "$LOG_PATH/default-backupconfig-cr.json"
  
  DEFAULT_BACKUPCONFIG=$(cat "$LOG_PATH/default-backupconfig-cr.json" \
    | run_jq 'del(.apiVersion) | del(.kind)' \
    | run_jq '.spec.storage.s3compatible.credentials.accessKey = "secret"
      | .spec.storage.s3compatible.credentials.secretKey = "secret"')
  echo "$DEFAULT_BACKUPCONFIG" > "$LOG_PATH/default-backupconfig.json"

  kubectl delete sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"
}

e2e_test_after_all() {
  unset BACKUPCONF
}

e2e_test() {
  run_test "Check that a created backup config can be accessed directly through the API" check_backupconfig_directly

  run_test "Check that a created backup config is included in the response" check_backupconfig_in_list

  run_test "Check that a backup config was removed from the list of backup configs after its deletion" check_backupconfig_removed_from_list

  run_test "Check that a backup config was removed from direct access after its deletion" check_backupconfig_deletion_directly

  run_test "Backup config creation through the API" test_backupconfig_create_with_api

  run_test "Check that a backup config created with the API is visible" api_created_backupconfig_visible

  run_test "Backup config update with the api" test_update_backupconfig_with_api

  run_test "Check that backup config changes are reflected in the api" test_api_updated_backupconfig_is_visible

  run_test "Check that backup config changes to s3 storage are reflected in the api" test_api_updated_to_s3_backupconfig_is_visible

  run_test "Check that backup config changes to s3compatible storage reflected in the api" test_api_updated_to_s3compatible_backupconfig_is_visible

  run_test "Check that backup config changes to gcs storage are reflected in the api" test_api_updated_to_gcs_backupconfig_is_visible

  run_test "Check that backup config changes to azureblob storage are reflected in the api" test_api_updated_to_azureblob_backupconfig_is_visible

  run_test "Check that backup config deletions with the API are reflected in the API" test_api_delete_backupconfig_is_invible

  run_test "Check backup config deletion with api" test_delete_backupconfig_with_api

  run_test "Constraint violations should be detected" test_constraint_violation_api_error

  run_test "User with wrong credentials should not be authenticated" test_authentication_api_error

}

create_backupconfig() {
  kubectl apply -f "$LOG_PATH/default-backupconfig-cr.json"

  wait_until eval 'kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"'
}

delete_backupconfig_only() {
  echo "Deleting backup config if there is any"
  if kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"
  then
    echo "Backup config $BACKUPCONF found, deleting..."

    kubectl delete sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"

    wait_until eval '! kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"'
  else
    echo "No backup config found"
  fi
}

check_backupconfig_in_list() {
  create_backupconfig

  if run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\") | select ( .metadata.name == \"$BACKUPCONF\") | .metadata.name" -r \
    | grep -q "^$BACKUPCONF$"
  then
    echo "Backup config $BACKUPCONF included in json response"
    return 0
  else
    echo "Backup config $BACKUPCONF not included in json response"
    return 1
  fi
}

get_backupconfig_status() {
  run_curl -r "stackgres/sgbackupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF"  -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}"
}

check_backupconfig_directly() {
  local HTTP_STATUS

  create_backupconfig

  HTTP_STATUS="$(get_backupconfig_status)"

  if [ "$HTTP_STATUS" -eq "200" ]
  then
    echo "Backup config $BACKUPCONF was found by the api"
    return 0
  else
    echo "Backup config $BACKUPCONF was not found by the api"
    return 1
  fi
}

check_backupconfig_removed_from_list() {
  delete_backupconfig_only

  if run_curl -r "stackgres/sgbackupconfig"  -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\") | select ( .metadata.name == \"$BACKUPCONF\") | .metadata.name" -r \
    | grep -q "^$BACKUPCONF$"
  then
    echo "Backup config $BACKUPCONF wasn't removed from cache"
    return 1
  else 
    echo "Backup config $BACKUPCONF was removed from cache"
    return 0
  fi
}

check_backupconfig_deletion_directly() {
  local HTTP_STATUS

  delete_backupconfig_only

  HTTP_STATUS="$(run_curl -r "stackgres/sgbackupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF" -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")"

  if [ "$HTTP_STATUS" -eq "404" ]
  then
    echo "Backup config $BACKUPCONF was not found by the api"
    return 0
  else
    echo "Backup config $BACKUPCONF was found by the api"
    return 1
  fi
}

create_backupconfig_with_api() { 
  local HTTP_STATUS

  echo "Creating backupconfig $BACKUPCONF with the operator API"

  delete_backupconfig_only

  echo "Sending creation request"

  HTTP_STATUS="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    local ERROR_RESPONSE
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_backupconfig_create_with_api() {
  create_backupconfig_with_api

  if wait_until eval 'kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"'
  then
    echo "Backup config created with the operator API"
  else
    echo "Backup config wasn't created with the API"
    return 1
  fi
}

api_created_backupconfig_visible() {
  create_backupconfig_with_api

  check_backupconfig_directly
}

update_backupconfig_parameter_with_api() {
  local HTTP_STATUS

  UPDATED_BACKUPCONFIG=$(cat "$LOG_PATH/default-backupconfig.json" | run_jq ".spec[\"$1\"] = $2" )
  echo "$UPDATED_BACKUPCONFIG" > "$LOG_PATH/updated-backupconfig.json"

  HTTP_STATUS="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/updated-backupconfig.json" -e '-X PUT -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "Request acknowledged by the operator"
  else
    local ERROR_RESPONSE
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/updated-backupconfig.json" -e '-X PUT')"

    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_update_backupconfig_with_api() {
  create_backupconfig

  update_backupconfig_parameter_with_api 'retention' '10'

  if kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF" -o jsonpath='{.spec.retention}' \
    | grep -q "^10$"
  then
    echo "Backup config was updated"
  else
    echo "Backup config was not updated"
    return 1
  fi
}

get_backupconfig_from_api() {
  run_curl -r "stackgres/sgbackupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF" -n "$CLUSTER_NAMESPACE"
}

test_api_updated_backupconfig_is_visible() {
  update_backupconfig_parameter_with_api 'retention' '10'

  if get_backupconfig_from_api | run_jq '.spec.retention' -r \
    | grep -q "^10$"
  then
    echo "Backup config updates are being reflected in the api"
  else
    echo "Backup config updates aren't being reflected in the api"
    return 1
  fi
}

test_api_updated_s3_backupconfig_is_visible() {
  update_backupconfig_parameter_with_api 'storage' '{
    "type":"s3",
    "s3": {
      "bucket": "test",
      "credentials": {
        "accessKey": "secret",
        "secretKey": "secret"
      }
    }
  }'

  if get_backupconfig_from_api | run_jq '.spec.storage.type' -r \
    | grep -q "^s3$"
  then
    echo "Backup config updates to s3 storage are being reflected in the api"
  else
    echo "Backup config updates to s3 storage aren't being reflected in the api"
    return 1
  fi
}

test_api_updated_s3compatible_backupconfig_is_visible() {
  update_backupconfig_parameter_with_api 'storage' '{
    "type":"s3compatible",
    "s3compatible": {
      "bucket": "test",
      "credentials": {
        "accessKey": "secret",
        "secretKey": "secret"
      }
    }
  }'

  if get_backupconfig_from_api | run_jq '.spec.storage.type' -r \
    | grep -q "^s3compatible$"
  then
    echo "Backup config updates to s3compatible storage are being reflected in the api"
  else
    echo "Backup config updates to s3compatible storage aren't being reflected in the api"
    return 1
  fi
}

test_api_updated_gcs_backupconfig_is_visible() {
  update_backupconfig_parameter_with_api 'storage' '{
    "type":"gcs",
    "gcs": {
      "bucket": "test",
      "credentials": {
        "serviceAccountJsonKey": "secret"
      }
    }
  }'

  if get_backupconfig_from_api | run_jq '.spec.storage.type' -r \
    | grep -q "^gcs$"
  then
    echo "Backup config updates to gcs storage are being reflected in the api"
  else
    echo "Backup config updates to gcs storage aren't being reflected in the api"
    return 1
  fi
}

test_api_updated_azureblob_backupconfig_is_visible() {
  update_backupconfig_parameter_with_api 'storage' '{
    "type":"azureblob",
    "azureblob": {
      "bucket": "test",
      "credentials": {
        "account": "secret",
        "accessKey": "secret"
      }
    }
  }'

  if get_backupconfig_from_api | run_jq '.spec.storage.type' -r \
    | grep -q "^azureblob$"
  then
    echo "Backup config updates to azureblob storage are being reflected in the api"
  else
    echo "Backup config updates to azureblob storage aren't being reflected in the api"
    return 1
  fi
}

delete_backupconfig_with_api() {
  local HTTP_STATUS

  HTTP_STATUS="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    return 0
  else
    local ERROR_RESPONSE
    ERROR_RESPONSE="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X PUT')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_delete_backupconfig_with_api() {
  create_backupconfig

  delete_backupconfig_with_api

  if wait_until eval '! kubectl get sgbackupconfigs.stackgres.io -n "$CLUSTER_NAMESPACE" "$BACKUPCONF"'
  then
    echo "backupconfig was deleted"
  else
    echo "backupconfig was not deleted"
    return 1
  fi
}

test_api_delete_backupconfig_is_invible() {
  create_backupconfig

  delete_backupconfig_with_api

  if wait_until eval '[ "$(get_backupconfig_status)" = "404" ]'
  then
    echo "Backup config removed from the API"
  else
    echo "Backup config wasn't removed from the API"
    return 1
  fi
}

test_constraint_violation_api_error() {

  INVALID_PGCONFIG=$(cat "$LOG_PATH/default-backupconfig.json" | run_jq '.spec.retention = -1' )

  echo "$INVALID_PGCONFIG" > "$LOG_PATH/invalid-backupconfig.json"
  
  local HTTP_STATUS

  HTTP_STATUS="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE"  -d "$LOG_PATH/invalid-backupconfig.json" -e '-X POST -w %{http_code} -o /dev/null')"

  assert_string_equal "422" "$HTTP_STATUS"

  ERROR_RESPONSE="$(run_curl -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/invalid-backupconfig.json" -e '-X POST')"

  EXPECTED_ERROR_TYPE="constraint-violation"
  EXPECTED_ERROR_TITLE="doesn't complain syntactic rules"
  EXPECTED_ERROR_DETAIL="greater than zero"
  EXPECTED_ERROR_FIELD="retention"

  assert_api_error "$ERROR_RESPONSE"

}

test_authentication_api_error() {
  local HTTP_STATUS

  HTTP_STATUS="$(run_curl -a e2e:tets -r "stackgres/sgbackupconfig"  -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")"

  check_authentication_error

  HTTP_STATUS="$(run_curl -a e2e:tets -r "stackgres/sgbackupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF"  -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")"

  check_authentication_error

  HTTP_STATUS="$(run_curl -a e2e:tets -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X POST -w %{http_code} -o /dev/null')"

  check_authentication_error

  HTTP_STATUS="$(run_curl -a e2e:tets -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X PUT -w %{http_code} -o /dev/null')"

  check_authentication_error

  HTTP_STATUS="$(run_curl -a e2e:tets -r "stackgres/sgbackupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  check_authentication_error
}

check_authentication_error() {
  if [ "$HTTP_STATUS" = "401" ]
  then
    echo "Request returned expected authentication error"
    return 0
  else
    echo "Request returned unexpected response status $HTTP_STATUS instead of the expected authentication error."
    return 1
  fi
}