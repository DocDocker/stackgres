#!/bin/sh

e2e_test_install() {
  BACKUPCONF="backupconf"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 --set cluster.create=false --set cluster.backupconfig=$BACKUPCONF \
    --set config.backup.create=true --set config.backup.minio.create=false \
    --set-string config.backup.s3.prefix=s3://test \
    --set-string config.backup.s3.accessKey.name=test --set-string config.backup.s3.accessKey.key=test \
    --set-string config.backup.s3.secretKey.name=test --set-string config.backup.s3.secretKey.key=test

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  PG_BACKUPCONF=$(kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF  -o json \
    | run_jq 'del(.apiVersion) | del(.kind)'  \
    | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')

  echo "$PG_BACKUPCONF" > "$LOG_PATH/default-backupconfig.json"

  kubectl delete sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF
}

e2e_test_after_all() {
  unset BACKUPCONF
}

e2e_test() {
  run_test "Check that a created backup config can be accessed directly through the API" check_backupconfig_directly

  run_test "Check that a created backup config is included in the response" check_backupconfig_in_list

  run_test "Check that a backup config was removed from the list of backup configs after its deletion" check_backupconfig_removed_from_list

  run_test "Check that a backup config was removed from direct access after its deletion" check_backupconfig_deletion_directly

  run_test "Backup config creation through the API" test_backupconfig_create_with_api

  run_test "Check that a backup config created with the API is visible" api_created_backupconfig_visible

  run_test "Backup config update with the api" test_update_backupconfig_with_api

  run_test "Check that backup config changes are reflected in the api" test_api_updated_backupconfig_is_visible

  run_test "Check that backup config deletions with the API are reflected in the API" test_api_delete_backupconfig_is_invible

  run_test "Check backup config deletion with api" test_delete_backupconfig_with_api
}

create_backupconfig() {
  kubectl apply -f "$LOG_PATH/default-backupconfig.json"

  while ! kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF
  do
    sleep 2
  done
}

delete_backupconfig_only() {
  echo "Deleting backup config if there is any"
  if kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF
  then

    echo "Backup config $BACKUPCONF found, deleting..."

    kubectl delete sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF

    while kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF
    do
      echo "Backup config $BACKUPCONF deleted..."
      sleep 2
    done
  else
    echo "No backup config found"
  fi
}

check_backupconfig_in_list() {
  create_backupconfig
  local BACKUPCONF_IN_RESPONSE
  BACKUPCONF_IN_RESPONSE=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\") | select ( .metadata.name == \"$BACKUPCONF\")" \
    | run_jq '.metadata.name' -r)

  echo "$BACKUPCONF_IN_RESPONSE"
  if [ "$BACKUPCONF_IN_RESPONSE" = "$BACKUPCONF" ]
  then
    echo "Backup config $BACKUPCONF included in json response"
    return 0
  else
    echo "Backup config $BACKUPCONF not included in json response"
    return 1
  fi
}

get_backupconfig_status() {
  local HTTP_STATUS
  HTTP_STATUS=$(run_curl -r "stackgres/backupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF"  -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")
  echo $HTTP_STATUS
}

check_backupconfig_directly() {
  create_backupconfig
  local HTTP_STATUS
  HTTP_STATUS=$(get_backupconfig_status)

  if [ $HTTP_STATUS -eq 200 ]
  then
    echo "Backup config $BACKUPCONF was found by the api"
    return 0
  else
    echo "Backup config $BACKUPCONF was not found by the api"
    return 1
  fi
}

check_backupconfig_removed_from_list() {
  delete_backupconfig_only
  local BACKUPCONF_IN_RESPONSE

  BACKUPCONF_IN_RESPONSE=$(run_curl -r "stackgres/backupconfig"  -n "$CLUSTER_NAMESPACE" \
    | run_jq -c ".[] | select ( .metadata.namespace = \"$CLUSTER_NAMESPACE\") | select ( .metadata.name = \"$BACKUPCONF\")" \
    | run_jq '.metadata.name' -r)

  if [ "$BACKUPCONF_IN_RESPONSE" = "$BACKUPCONF" ]
  then
    echo "Backup config $BACKUPCONF wasn't removed from cache";
    return 1
  else 
    echo "Backup config $BACKUPCONF was removed from cache";
    return 0
  fi
}

check_backupconfig_deletion_directly() {
  delete_backupconfig_only
  local HTTP_STATUS
  HTTP_STATUS=$(run_curl -r "stackgres/backupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF" -n "$CLUSTER_NAMESPACE" -e "-LI -o /dev/null -w %{http_code}")

  if [ $HTTP_STATUS -eq 404 ]
  then
    echo "Backup config $BACKUPCONF was not found by the api"
    return 0
  else
    echo "Backup config $BACKUPCONF was found by the api"
    return 1
  fi
}

create_backupconfig_with_api() { 
  echo "Creating backupconfig $BACKUPCONF with the operator API"

  delete_backupconfig_only

  local HTTP_STATUS

  echo "Sending creation request"

  if HTTP_STATUS=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X POST -w %{http_code} -o /dev/null')
  then 
    if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
    then
      echo "request acknowledged by the operator"
    else
      local ERROR_RESPONSE
      ERROR_RESPONSE=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X POST')
      echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
      return 1
    fi
  else
    echo "request failed"
  fi
}

test_backupconfig_create_with_api() {
  create_backupconfig_with_api

  sleep 2

  if kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF
  then
    echo "Backup config created with the operator API"
  else
    echo "Backup config wasn't created with the API"
    return 1
  fi
}

api_created_backupconfig_visible() {
  create_backupconfig_with_api

  check_backupconfig_directly
}



update_backupconfig_retention_with_api() {
  local TMP_JSON
  local HTTP_STATUS

  TMP_JSON=$(mktemp)

  BACKUPCONF_CONFIG_FILE=$(cat "$LOG_PATH/default-backupconfig.json" | run_jq ".spec.retention = $1")

  echo "$BACKUPCONF_CONFIG_FILE" > "$LOG_PATH/stackgres-backupconfig.json"

  HTTP_STATUS=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/stackgres-backupconfig.json" -e '-X PUT -w %{http_code} -o /dev/null')

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
  else
    local ERROR_RESPONSE
    ERROR_RESPONSE=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/stackgres-backupconfig.json" -e '-X PUT')

    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_update_backupconfig_with_api() {
  local BACKUPCONF_MEMORY

  create_backupconfig

  update_backupconfig_retention_with_api '10'

  BACKUPCONF_MEMORY=$(kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF -o jsonpath='{.spec.retention}')
  if [ "$BACKUPCONF_MEMORY" = "10" ]
  then
    echo "Backup config was updated"
  else
    echo "Backup config was not updated"
    return 1
  fi
}

get_backupconfig_from_api() {
  echo $(run_curl -r "stackgres/backupconfig/$CLUSTER_NAMESPACE/$BACKUPCONF" -n "$CLUSTER_NAMESPACE")
}

test_api_updated_backupconfig_is_visible() {
  local BACKUPCONF_MEMORY

  update_backupconfig_retention_with_api '10'

  BACKUPCONF_MEMORY=$(get_backupconfig_from_api | run_jq '.spec.retention' -r)

  if [ "$BACKUPCONF_MEMORY" = "10" ]
  then
    echo "Backup config updates are being reflected in the api"
  else
    echo "Backup config updates aren't being reflected in the api"
    return 1
  fi
}

delete_backupconfig_with_api() {
  local HTTP_STATUS

  HTTP_STATUS=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X DELETE -w %{http_code} -o /dev/null')

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    return 0
  else

    ERROR_RESPONSE=$(run_curl -r "stackgres/backupconfig" -n "$CLUSTER_NAMESPACE" -d "$LOG_PATH/default-backupconfig.json" -e '-X PUT')
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_delete_backupconfig_with_api() {
  create_backupconfig

  delete_backupconfig_with_api

  if wait_until eval '! kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUPCONF'
  then
    echo "backupconfig was deleted"
  else
    echo "backupconfig was not deleted"
    return 1
  fi
}

test_api_delete_backupconfig_is_invible() {
  local HTTP_STATUS

  create_backupconfig

  delete_backupconfig_with_api

  if wait_until eval '[ "$(get_backupconfig_status)" = "404" ]'
  then
    echo "Backup config removed from the API"
  else
    echo "Backup config wasn't removed from the API"
    return 1
  fi
}

