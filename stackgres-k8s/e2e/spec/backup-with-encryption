#!/bin/sh

. "$SPEC_PATH/abstract/backup"

e2e_test_install() {
  if [ "$E2E_ENV" = "kind" ]
  then
    cat << EOF > "$LOG_PATH/minio-affinity.yaml"
minio:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "kubernetes.io/hostname"
              operator: "In"
              values: [ "${KIND_NAME}-worker" ]
EOF
  else
    > "$LOG_PATH/minio-affinity.yaml"
  fi

  kubectl create namespace "$CLUSTER_NAMESPACE"

  generate_pgp_private_key "$LOG_PATH/backup.key"

  kubectl create secret -n "$CLUSTER_NAMESPACE" generic pgpconfiguration --from-file=key="$LOG_PATH/backup.key"

  cat << EOF > "$LOG_PATH/secret.yaml"
config:
  backup:
    pgpConfiguration:
      name: pgpconfiguration
      key: key
EOF

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    -f "$LOG_PATH/minio-affinity.yaml" -f "$LOG_PATH/secret.yaml"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 4

  # Avoid backups before waiting for pods (since backup pods could biase the wait)
  kubectl patch sgbackupconfig -n "$CLUSTER_NAMESPACE" backupconf --type json \
    --patch '[{"op":"replace","path":"/spec/fullSchedule","value":"*/1 * * * *"}]'
}

generate_pgp_private_key() {
  gpg --list-secret-keys --with-colons joe@foo.bar | grep '^fpr:' | cut -d : -f 10 | sort | uniq \
    | xargs -r -n 1 -I % gpg --batch --yes --delete-secret-keys % || true
  gpg --batch --yes --delete-keys joe@foo.bar || true
  cat << EOF | gpg --batch --generate-key
    %echo Generating a basic OpenPGP key
    Key-Type: RSA
    Key-Length: 3072
    Name-Real: Joe Tester
    Name-Comment: with empty passphrase
    Name-Email: joe@foo.bar
    Expire-Date: 0
    %no-ask-passphrase
    %no-protection
    %commit
    %echo done
EOF
  gpg --batch --export-secret-keys --armour joe@foo.bar > "$1"
  gpg --list-secret-keys --with-colons joe@foo.bar | grep '^fpr:' | cut -d : -f 10 | sort | uniq \
    | xargs -r -n 1 -I % gpg --batch --yes --delete-secret-keys %
  gpg --batch --yes --delete-keys joe@foo.bar
}

e2e_test() {
  run_test "Checking that backup is working with encryption enabled" check_backup_with_encryption_enabled
}

check_backup_with_encryption_enabled() {
  check_backup 0
}

