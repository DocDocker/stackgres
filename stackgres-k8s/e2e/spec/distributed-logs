#!/bin/sh

e2e_test_install() {
  DISTRIBUTED_LOGS_NAME=distributedlogs

  create_or_replace_cluster "$CLUSTER_NAME-for-distributedlogs" "$CLUSTER_NAMESPACE" "1" \
    --set cluster.create=false \
    --set config.create=false \
    --set profiles=null \
    --set cluster.distributedLogs.enabled=true \
    --set cluster.distributedLogs.create=true \
    --set-string cluster.distributedLogs.name="$DISTRIBUTED_LOGS_NAME" \
    --set-string cluster.distributedLogs.volumeSize=128Mi

  deploy_psql_pod "$CLUSTER_NAMESPACE"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" "3"
}

e2e_test() {
  run_test "Checking that is possible to connect using services is working" service_check

  run_test "Checking that distributed logs attach to the cluster" check_distributed_logs_attach_to_cluster
}

service_check() {
  RESPONSE_PRIMARY="$(run_query -c "$DISTRIBUTED_LOGS_NAME" -x psql -k postgres \
    -h "$DISTRIBUTED_LOGS_NAME"-primary -i 0 -p 5432)"

  if [ "$RESPONSE_PRIMARY" = "1" ]
  then
    echo "SUCCESS: Connections are possible using services"
    return 0
  else
    echo "FAIL: Cannot connect to primary db using a kubernetes service"
    return 1
  fi
}

check_distributed_logs_attach_to_cluster() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "1" \
    --set cluster.distributedLogs.enabled=true \
    --set cluster.distributedLogs.create=false \
    --set-string cluster.distributedLogs.name="$DISTRIBUTED_LOGS_NAME"

  wait_pods_running "$CLUSTER_NAMESPACE" "4"

  RESPONSE="$(run_query -c "$CLUSTER_NAME" -x psql -k postgres \
    -h "$CLUSTER_NAME"-primary -i 0 -p 5432 -q "\"SELECT 'distributed-logs-works'\"")"

  if [ "$RESPONSE" = "distributed-logs-works" ]
  then
    echo "SUCCESS: Entry log created"
  else
    echo "FAIL: Cannot create entry log"
    return 1
  fi

  if wait_until eval 'get_logs_count_with_text distributed-logs-works | grep -q "^1$"'
  then
    echo "Cluster log entry included in json response"
  else
    echo "Cluster log entry not included in json response"
    return 1
  fi
}

get_logs_count_with_text() {
run_curl \
  -r "stackgres/sgcluster/logs/$CLUSTER_NAMESPACE/$CLUSTER_NAME?text=$1" \
  -n "$CLUSTER_NAMESPACE" \
  | run_jq -r "map(select(.message | contains(\"distributed-logs-works\"))) | length"
}
