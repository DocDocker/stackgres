#!/bin/sh

. "$SPEC_PATH/abstract/prometheus-integration"

prometheus_namespace() {
  echo "$CLUSTER_NAMESPACE-monitor"
}

prometheus_service() {
  echo "prometheus-prometheus-oper-prometheus"
}

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  if [ "$E2E_ENV" = "minishift" ]
  then
    eval "$(minishift oc-env)"
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-admission
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-grafana
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-operator
    oc adm policy add-scc-to-user anyuid -n "$(prometheus_namespace)" -z prometheus-prometheus-oper-prometheus
  fi

  install_prometheus

  wait_pods_running "$(prometheus_namespace)" 3

  upgrade_or_install_operator \
    --set grafana.autoEmbed=true \
    --set-string grafana.webHost="prometheus-grafana.$(prometheus_namespace)"

  wait_pods_terminated "stackgres" 2

  kubectl create namespace "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

install_prometheus(){
  kubectl create namespace "$(prometheus_namespace)" || true

  helm install prometheus stable/prometheus-operator \
    --version 8.13.4 \
    --namespace "$(prometheus_namespace)" \
    --disable-openapi-validation \
    --set prometheusOperator.createCustomResource=false \
    --set alertmanager.enabled=false \
    --set kubeStateMetrics.enabled=false \
    --set nodeExporter.enabled=false
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  helm_cleanup_chart prometheus "$(prometheus_namespace)"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
  k8s_async_cleanup_namespace "$(prometheus_namespace)"
}

e2e_test() {
  run_test "Check that exporter service is created" check_exporter_service
  run_test "Check that exporter service monitor was created" check_exporter_service_monitor
  run_test "Check that envoy service is created" check_envoy_service
  run_test "Check that envoy service monitor was created" check_envoy_service_monitor
  run_test "Check that grafana is embedded" check_grafana_embedded
}
