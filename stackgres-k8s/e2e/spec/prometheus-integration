#!/bin/sh

e2e_test_install() {
  PROMETHEUS_NAMESPACE="$CLUSTER_NAMESPACE-monitor"
  GRAFANA_CREDENTIALS=admin:prom-operator

  helm install --namespace $PROMETHEUS_NAMESPACE --name prometheus stable/prometheus-operator || true
  
  wait_pods_running "$PROMETHEUS_NAMESPACE" 8

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME"
  helm_cleanup_chart prometheus

  k8s_cleanup_namespace "$CLUSTER_NAMESPACE"
  k8s_cleanup_namespace "$PROMETHEUS_NAMESPACE"
}

e2e_test_after_all() {
  unset PROMETHEUS_NAMESPACE
  unset GRAFANA_CREDENTIALS
}

e2e_test() {
  run_test "Check that exporter service is created" check_exporter_service
  run_test "Check that exporter service monitor was created" check_exporter_service_monitor
  run_test "Check that envoy service is created" check_envoy_service
  run_test "Check that envoy service monitor was created" check_envoy_service_monitor
  run_test "Check that grafana is embedded" check_grafana_embedded
}

check_exporter_service() {
  local SERVICE

  SERVICE="$CLUSTER_NAME-prometheus-postgres-exporter"

  if wait_until kubectl get services -n "$CLUSTER_NAMESPACE" $SERVICE
  then
    echo "Exporter service was created"
  else
    echo "Exporter service was not created"
  return 1 
  fi
}

check_exporter_service_monitor() {
  local SERVICE_MONITOR="$CLUSTER_NAMESPACE-$CLUSTER_NAME-stackgres-postgres-exporter"

  if wait_until kubectl get servicemonitors.monitoring.coreos.com -n "$PROMETHEUS_NAMESPACE" $SERVICE_MONITOR
  then
    echo "Exporter service monitor was created"
  else
    echo "Exporter service monitor wasn't created"
    return 1
  fi

  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl \
    curl "http://prometheus-prometheus-oper-prometheus.prometheus-integration-monitor:9090/api/v1/query?query=pg_settings_shared_buffers_bytes"
  then
    echo "Exporter metrics was found on prometheus"
  else
    echo "Exporter metrics wasn't found on prometheus"
    return 1
  fi
}

check_envoy_service() {
  local SERVICE

  SERVICE="$CLUSTER_NAME-prometheus-envoy"

  if wait_until kubectl get services -n "$CLUSTER_NAMESPACE" $SERVICE
  then
    echo "Envoy service was created"
  else
    echo "Envoy service was not created"
  return 1 
  fi
}

check_envoy_service_monitor() {
  local SERVICE_MONITOR="$CLUSTER_NAMESPACE-$CLUSTER_NAME-stackgres-envoy"

  if wait_until kubectl get servicemonitors.monitoring.coreos.com -n "$PROMETHEUS_NAMESPACE" $SERVICE_MONITOR
  then
    echo "Envoy service monitor was created"
  else
    echo "Envoy service monitor wasn't created"
    return 1
  fi

  if wait_until kubectl exec -i -n "$CLUSTER_NAMESPACE" curl \
    curl "http://prometheus-prometheus-oper-prometheus.prometheus-integration-monitor:9090/api/v1/query?query=envoy_cluster_upstream_cx_rx_bytes_total"
  then
    echo "Envoy metrics was found on prometheus"
  else
    echo "Envoy metrics wasn't found on prometheus"
    return 1
  fi
}

check_grafana_embedded() {
  if ! kubectl get deployment  -n stackgres stackgres-operator > /dev/null 2>&1
  then
    echo "skipping check since operator environment variable can not be changed when operator is not deployed in kubernetes"
    return
  fi

  echo "checking that if env variable GRAFANA_EMBEDDED is set to false any cluster shouldn't be marked with grafana embedded"

  kubectl set env -n stackgres deployment/stackgres-operator GRAFANA_EMBEDDED=false

  if wait_until eval '[ "$(get_grafana_embedded)" != "true" ]'
  then
    echo "Success. Grafana is not marked as embedded"
  else
    echo "Fail. Grafana is marked as embedded"
    return 1
  fi

  echo "checking that if env variable GRAFANA_EMBEDDED is set to true the cluster should be marked with grafana embedded"

  kubectl set env -n stackgres deployment/stackgres-operator GRAFANA_EMBEDDED=true

  if wait_until eval '[ "$(get_grafana_embedded)" = "true" ]'
  then
    echo "Success. Grafana is embedded"
  else
    echo "Fail. Grafana is not embedded"
    return 1
  fi
}

get_grafana_embedded() {
  run_curl -r "stackgres/cluster/pods/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-L" | run_jq '.grafanaEmbedded' -r
}
