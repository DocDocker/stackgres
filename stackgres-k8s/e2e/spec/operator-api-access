#!/bin/bash

test() {
  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 2

  run_test "Check that a created cluster can be accessed directly through the API" check_cluster_directly

  run_test "Check that a created cluster is included in the response" check_cluster_in_list

  run_test "Check that the status endpoint are returning the pod stats" test_cluster_stats_are_loaded

  run_test "Check that a cluster was removed from cache after its deletion" check_cluster_removed_from_list

  run_test "Check that a cluster was removed from direct access after its deletion" check_cluster_deletion_directly

  run_test "Cluster creation through the API" test_cluster_create_with_api

  run_test "Check that a cluster created with the API is visible" test_api_created_cluster_is_visible

  run_test "Cluster update with the api" test_update_cluster_with_api

  run_test "Check that cluster changes are reflected in the api" test_api_updated_cluster_is_visible

  run_test "Check cluster deletion with api" test_delete_cluster_with_api

  run_test "Check that cluster deletions with the API are reflected in the API" test_api_delete_cluster_is_visible
}

check_cluster_in_list() {
  CLUSTER_IN_RESPONSE="$(run_curl -r "stackgres/cluster" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\" and .metadata.name == \"$CLUSTER_NAME\")" \
    | run_jq '.metadata.name' -r)"

  if [ "$CLUSTER_IN_RESPONSE" = "$CLUSTER_NAME" ]
  then
    echo "Cluster $CLUSTER_NAME included in json response"
    return 0
  else
    echo "Cluster $CLUSTER_NAME not included in json response"
    return 1
  fi
}

get_cluster_http_status() {
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"
  echo $HTTP_STATUS
}

get_cluster_stats(){
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/status/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"
  echo $HTTP_STATUS
}

check_cluster_directly() {
  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_http_status)"

  if [ "$HTTP_STATUS" -eq 200 ]
  then
    echo "Cluster $CLUSTER_NAME was found bye the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME was not found bye the api"
    return 1
  fi
}

test_cluster_stats_are_loaded() {
  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_stats)"

  if [ "$HTTP_STATUS" -eq 200 ]
  then
    echo "Cluster $CLUSTER_NAME status was found by the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME stats was not found by the api"
    return 1
  fi
}

check_cluster_removed_from_list() {
  remove_cluster_if_exists "$CLUSTER_NAME"

  CLUSTER_IN_RESPONSE="$(run_curl -r "stackgres/cluster" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\" and .metadata.name == \"$CLUSTER_NAME\")" \
    | run_jq '.metadata.name' -r)"

  if [ "$CLUSTER_IN_RESPONSE" = "$CLUSTER_NAME" ]
  then
    echo "Cluster $CLUSTER_NAME wasn't removed from cache"
    return 1
  else
    echo "Cluster $CLUSTER_NAME was removed from cache"
    return 0
  fi
}

check_cluster_deletion_directly() {
  remove_cluster_if_exists "$CLUSTER_NAME"

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"

  if [ "$HTTP_STATUS" -eq 404 ]
  then
    echo "Cluster $CLUSTER_NAME was not found by the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME was found by the api"
    return 1
  fi
}

reset_cluster() {
  kubectl delete sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --ignore-not-found

  remove_cluster_if_exists "$CLUSTER_NAME-configs"

  wait_pods_terminated "$CLUSTER_NAMESPACE" 1

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

create_cluster_with_api() {
  reset_cluster

  kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
   | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)'\
    > "$LOG_PATH/stackgres-cluster.json"

  remove_cluster_if_exists "$CLUSTER_NAME"

  wait_pods_terminated "$CLUSTER_NAMESPACE" 1

  create_or_replace_cluster "$CLUSTER_NAME-configs" "$CLUSTER_NAMESPACE" 0 --set cluster.create=false

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    wait_pods_running "$CLUSTER_NAMESPACE" 2
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_cluster_create_with_api() {
  create_cluster_with_api

  CLUSTER_STATUS="$(kubectl get pod -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-0" -o jsonpath='{.status.phase}')"

  if [ "$CLUSTER_STATUS" = Running ]
  then
    echo "Cluster created with the API"
  else
    echo "Cluster not created or in invalid status: $CLUSTER_STATUS"
    return 1
  fi
}

test_api_created_cluster_is_visible() {
  create_cluster_with_api

  check_cluster_directly
}

update_cluster_instances_with_api() {
  reset_cluster

  kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)' > "$LOG_PATH/stackgres-cluster.json"

  run_jq ".spec.instances = 2" < "$LOG_PATH/stackgres-cluster.json" > "$LOG_PATH/stackgres-cluster.tmp.json" \
    && mv "$LOG_PATH/stackgres-cluster.tmp.json" "$LOG_PATH/stackgres-cluster.json"

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    wait_pods_running "$CLUSTER_NAMESPACE" 3
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_update_cluster_with_api() {
  update_cluster_instances_with_api

  CLUSTER_INSTANCES="$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')"
  if [ "$CLUSTER_INSTANCES" = "2" ]
  then
    echo "Cluster instances were increased"
  else
    echo "Cluster instances weren't increase"
    return 1
  fi
}

test_api_updated_cluster_is_visible() {
  update_cluster_instances_with_api

  CLUSTER_INSTANCES="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" | run_jq '.spec.instances' -r)"

  if [ "$CLUSTER_INSTANCES" = "2" ]
  then
    echo "Cluster updates are being reflected in the api"
  else
    echo "Cluster updates aren't being reflected in the api"
    return 1
  fi
}

delete_cluster_with_api() {
  reset_cluster

  kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
   | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)' \
    > "$LOG_PATH/stackgres-cluster.json"

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    wait_pods_terminated "$CLUSTER_NAMESPACE" 1
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_delete_cluster_with_api() {
  delete_cluster_with_api
}

test_api_delete_cluster_is_visible() {
  delete_cluster_with_api

  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_http_status)"

  if [ "$HTTP_STATUS" = "404" ]
  then
    echo "Cluster removed from the API"
  else
    echo "Cluster wasn't removed from the API"
    return 1
  fi
}
