#!/bin/sh

e2e_test_install() {
  OPERATOR_NAMESPACE="stackgres"
  DEFAULT_PGCONFIG="defaultpgconfig"
  DEFAULT_PGCBOUNCER="defaultpgbouncer"
  DEFAULT_PROFILE="defaultprofile"
  DEFAULT_BACKUP="defaultbackupconfig"
}

e2e_test_after_all(){
  unset OPERATOR_NAMESPACE
  unset DEFAULT_PGCONFIG
  unset DEFAULT_PGCBOUNCER
  unset DEFAULT_PROFILE
  unset DEFAULT_BACKUP
  unset DEFAULT_RESTORE
}


e2e_test() {
  run_test "Postgres default config creation" default_pg_config

  run_test "Postgres default config update" default_pg_config_update

  run_test "Postgres default config deletion" default_pg_config_delete

  run_test "Pgbouncer default config creation" default_pg_bouncer

  run_test "Pgbouncer default config update" default_pg_bouncer_update

  run_test "Pgbouncer default config deletion" default_pg_bouncer_delete

  run_test "Instance profile default config creation" default_instance_profile

  run_test "Instance profile default config update" default_instance_profile_update

  run_test "Instance profile default config deletion" default_instance_profile_delete

  run_test "Backup default config creation" default_backup

  run_test "Backup default config update" default_backup_update

  run_test "Backup default config deletion" default_backup_delete
 
}

check_existence(){

  
  if wait_until eval "kubectl get "$1.stackgres.io" -n $OPERATOR_NAMESPACE $2"
  then
    echo "$2 found" 
  else
    echo "$2 not found"
    return 1
  fi
}

check_update(){
  if kubectl patch "$1.stackgres.io" -n $OPERATOR_NAMESPACE $2 --type='json' -p="$3"
  then
    echo "$2 Updated. Shold not be able to update $2"
    return 1
  else
    echo "$2 not updated"
    return 0
  fi
}

check_delete(){

   if kubectl delete "$1.stackgres.io" -n $OPERATOR_NAMESPACE $2
  then
    echo "$2 deleted. Should not be able to delete the $2"
    return 1
  else
     echo "$2 not deleted"
    return 0
  fi

}


default_pg_config(){

  check_existence sgpgconfigs $DEFAULT_PGCONFIG
  
}

default_pg_config_update(){

  check_update sgpgconfigs $DEFAULT_PGCONFIG '[{"op":"replace", "path": "/spec/postgresql.conf/shared_buffers", "value":"512MB"}]'  

}

default_pg_config_delete(){

  check_delete sgpgconfigs $DEFAULT_PGCONFIG

}

default_pg_bouncer(){

  check_existence sgconnectionpoolingconfigs $DEFAULT_PGCBOUNCER
  
}

default_pg_bouncer_update(){

  check_update sgconnectionpoolingconfigs $DEFAULT_PGCBOUNCER '[{"op":"replace", "path": "/spec/pgbouncer.ini/max_client_conn", "value":"400"}]'

}

default_pg_bouncer_delete(){

  check_delete sgconnectionpoolingconfigs $DEFAULT_PGCBOUNCER

}

default_instance_profile(){

  check_existence sgprofiles $DEFAULT_PROFILE

}

default_instance_profile_update(){

  check_update sgprofiles $DEFAULT_PROFILE '[{"op":"replace", "path": "/spec/cpu", "value":"2"}]'

}

default_instance_profile_delete(){

  check_delete sgprofiles $DEFAULT_PROFILE
  
}

default_backup(){
  check_existence sgbackupconfigs $DEFAULT_BACKUP
}

default_backup_update(){

  check_update sgbackupconfigs $DEFAULT_BACKUP '[{"op":"replace", "path": "/spec/fullWindow", "value":10}]'

}

default_backup_delete(){

  check_delete sgbackupconfigs $DEFAULT_BACKUP

}
