#!/bin/sh

export E2E_MINOR_SOURCE_POSTGRES_VERSION="${E2E_MINOR_SOURCE_POSTGRES_VERSION:-11.8}"
export E2E_MINOR_TARGET_POSTGRES_VERSION="${E2E_MINOR_TARGET_POSTGRES_VERSION:-11.9}"

e2e_test_install() {
  true
}

e2e_test() {
  run_test "Checking that restart is working" check_restart_is_working

  run_test "Checking that restart in-place is working" check_restart_in_place_is_working

  run_test "Checking that restart timeout works correctly" check_restart_timed_out

  run_test "Checking that restart can be repeated if failed" check_restart_repeat
}

reset_cluster() {
  remove_cluster_if_exists "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  wait_until eval '[ "$(kubectl get pvc -n "$CLUSTER_NAMESPACE" --template "{{ .items | len }}")" = 0 ]'

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set-string cluster.postgresVersion="$E2E_MINOR_SOURCE_POSTGRES_VERSION"

  wait_pods_running "$CLUSTER_NAMESPACE" 2

  generate_mock_data "$CLUSTER_NAME"
  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"

  kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type json \
    -p "$(cat << EOF
[
  {"op":"replace","path":"/spec/postgresVersion","value":"$E2E_MINOR_TARGET_POSTGRES_VERSION"}
]
EOF
        )"
}

check_restart_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
EOF

  check_restart

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}

check_restart_in_place_is_working() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  restart:
    method: InPlace
EOF

  check_restart

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}

check_restart() {
  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops "restart" \
    --for condition=Completed
  then
    echo "SUCCESS. restart completed."
  else
    echo "FAILED. restart failed."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. restart job was not removed after completion."
  else
    echo "FAILED. restart job was removed after completion."
    return 1
  fi

  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}

check_restart_timed_out() {
  reset_cluster

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGDbOps
metadata:
  name: restart
  namespace: $CLUSTER_NAMESPACE
spec:
  sgCluster: $CLUSTER_NAME
  op: restart
  timeout: PT1S
EOF

  if kubectl wait --timeout "$((E2E_TIMEOUT * 2))s" -n "$CLUSTER_NAMESPACE" sgdbops restart \
    --for condition=Failed
  then
    echo "SUCCESS. restart failed."
  else
    echo "FAILED. restart did not fail."
    return 1
  fi

  if [ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 1 ]
  then
    echo "SUCCESS. restart job was not removed after failure."
  else
    echo "FAILED. restart job was removed after failure."
    return 1
  fi

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart

  if wait_until eval '[ "$(kubectl get -n "$CLUSTER_NAMESPACE" job \
    -l "cluster-name=$CLUSTER_NAME,db-ops=true" \
    -o name 2>/dev/null | wc -l)" = 0 ]'
  then
    echo "SUCCESS. restart job was removed after sgdbops was removed."
  else
    echo "FAILED. restart job was not removed after sgdbops was removed."
    return 1
  fi

  check_mock_data_samehost "$CLUSTER_NAME"
  check_mock_data_replication "$CLUSTER_NAME"
}

check_restart_repeat() {
    cat << EOF | kubectl create -f -
  apiVersion: stackgres.io/v1
  kind: SGDbOps
  metadata:
    name: restart
    namespace: $CLUSTER_NAMESPACE
  spec:
    sgCluster: $CLUSTER_NAME
    op: restart
EOF

  check_restart

  kubectl delete sgdbops -n "$CLUSTER_NAMESPACE" restart
}
