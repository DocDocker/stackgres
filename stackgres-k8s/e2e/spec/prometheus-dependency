#!/bin/sh

. "$SPEC_PATH/abstract/prometheus-integration"

prometheus_namespace() {
  echo "$OPERATOR_NAMESPACE"
}

prometheus_service() {
  echo "stackgres-operator-prometh-prometheus"
}

e2e_exclusive_lock() {
  true
}

e2e_test_install() {
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
  k8s_async_cleanup

  if [ "$E2E_ENV" = "minishift" ]
  then
    eval "$(minishift oc-env)"
    oc adm policy add-scc-to-user anyuid -n "$OPERATOR_NAMESPACE" -z stackgres-operator-prometh-admission
    oc adm policy add-scc-to-user anyuid -n "$OPERATOR_NAMESPACE" -z stackgres-operator-grafana
    oc adm policy add-scc-to-user anyuid -n "$OPERATOR_NAMESPACE" -z stackgres-operator-prometh-operator
    oc adm policy add-scc-to-user anyuid -n "$OPERATOR_NAMESPACE" -z stackgres-operator-prometh-prometheus
  fi

  install_operator \
    --disable-openapi-validation \
    --set grafana.autoEmbed=true \
    --set prometheus-operator.create=true \
    --set prometheus-operator.alertmanager.enabled=false \
    --set prometheus-operator.kubeStateMetrics.enabled=false \
    --set prometheus-operator.nodeExporter.enabled=false \
    --set prometheus-operator.kubeDns.enabled=false \
    --set prometheus-operator.kubeProxy.enabled=false \
    --set prometheus-operator.kubeScheduler.enabled=false \
    --set prometheus-operator.coreDns.enabled=false \
    --set prometheus-operator.kubeControllerManager.enabled=false \
    --set prometheus-operator.kubeEtcd.enabled=false

  wait_pods_running "$OPERATOR_NAMESPACE" 4

  kubectl create namespace "$CLUSTER_NAMESPACE"

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
}

e2e_test_uninstall() {
  delete_operator
  install_operator
  wait_pods_running "$OPERATOR_NAMESPACE" 1

  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test() {
  run_test "Check that exporter service is created" check_exporter_service
  run_test "Check that exporter service monitor was created" check_exporter_service_monitor
  run_test "Check that envoy service is created" check_envoy_service
  run_test "Check that envoy service monitor was created" check_envoy_service_monitor
  run_test "Check that grafana is embedded" check_grafana_embedded
}
