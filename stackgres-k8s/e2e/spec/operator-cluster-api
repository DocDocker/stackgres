#!/bin/sh

e2e_test_install() {

  if [ "$E2E_ENV" = "kind" ]
  then
    cat << EOF > "$LOG_PATH/minio-affinity.yaml"
minio:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "kubernetes.io/hostname"
              operator: "In"
              values: [ "${KIND_NAME}-worker" ]
EOF
  else
    > "$LOG_PATH/minio-affinity.yaml"
  fi

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    -f "$LOG_PATH/minio-affinity.yaml"

  deploy_curl_pod "$CLUSTER_NAMESPACE"

  wait_pods_running "$CLUSTER_NAMESPACE" 4

  DEFAULT_CONFIG_FILE=$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
   | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)')

   echo "$DEFAULT_CONFIG_FILE" > "$LOG_PATH/stackgres-cluster.json"

  kubectl patch sgbackupconfig -n "$CLUSTER_NAMESPACE" backupconf --type json \
    --patch '[{"op":"replace","path":"/spec/fullSchedule","value":"*/1 * * * *"}]'

  wait_until eval '[ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-0 -c patroni -- \
    wal-g backup-list | wc -l)" -gt 0 ]'
  
}

e2e_test() {
  run_test "Check that a created cluster can be accessed directly through the API" check_cluster_directly

  run_test "Check that a created cluster is included in the response" check_cluster_in_list

  run_test "Check that the status endpoint are returning the master stats" test_cluster_stats_are_loaded

  run_test "Check that the pod config endpoint are returning the pod details" test_cluster_pod_config_are_loaded

  run_test "Check that the number of pods match with the master and replicas" test_cluster_pod_count

  run_test "Check that a cluster was removed after its deletion in the API" check_cluster_removed

  run_test "Check cluster is created with the API and is visible in the API" test_api_created_cluster_is_visible

  run_test "Check cluster is updated with the API are reflected in the API" test_api_updated_cluster_is_visible

  run_test "Check cluster is deleted with the API are reflected in the API" test_api_delete_cluster_is_visible
}

check_cluster_in_list() {
  local CLUSTER_IN_RESPONSE
  CLUSTER_IN_RESPONSE="$(run_curl -r "stackgres/cluster" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\" and .metadata.name == \"$CLUSTER_NAME\")" \
    | run_jq '.metadata.name' -r)"

  if [ "$CLUSTER_IN_RESPONSE" = "$CLUSTER_NAME" ]
  then
    echo "Cluster $CLUSTER_NAME included in json response"
    return 0
  else
    echo "Cluster $CLUSTER_NAME not included in json response"
    return 1
  fi
}

get_cluster_http_status() {
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"
  echo $HTTP_STATUS
}

get_cluster_stats(){
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/status/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"
  echo $HTTP_STATUS
}

get_cluster_pod_configs_health(){
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/pods/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"
  echo $HTTP_STATUS
}

get_cluster_pod_count(){
  local POD_COUNT
  POD_COUNT="$(run_curl -r "stackgres/cluster/pods/$CLUSTER_NAMESPACE/$CLUSTER_NAME" | run_jq '.pods | length')"
  echo $POD_COUNT
}

check_cluster_directly() {
  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_http_status)"

  if [ "$HTTP_STATUS" -eq 200 ]
  then
    echo "Cluster $CLUSTER_NAME was found bye the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME was not found bye the api"
    return 1
  fi
}

test_cluster_stats_are_loaded() {
  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_stats)"

  if [ "$HTTP_STATUS" -eq 200 ]
  then
    echo "Cluster $CLUSTER_NAME status was found by the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME stats was not found by the api"
    return 1
  fi
}

test_cluster_pod_config_are_loaded(){
  local HTTP_STATUS
  HTTP_STATUS="$(get_cluster_pod_configs_health)"

  if [ "$HTTP_STATUS" -eq 200 ]
  then
    echo "Cluster $CLUSTER_NAME pod configs was found by the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME pod configs was not found by the api"
    return 1
  fi
}

test_cluster_pod_count(){
  local RETURNED_PODS="$(get_cluster_pod_count)"
  echo "Founded returned pods: ${RETURNED_PODS}"

  local STOP_AT=60

  local CHECK_START="$(date +%s)"
  local CURRENT_TIME="$(date +%s)"

  while [ $CURRENT_TIME -lt $((CHECK_START+STOP_AT)) ]
  do
    if [ "$RETURNED_PODS" -eq 2 ]
    then
      RETURNED_PODS="$(get_cluster_pod_count)"
      CURRENT_TIME="$(date +%s)"      
      sleep 1
    else
      echo "Pods in cluster should be 2 but found $RETURNED_PODS. Cron backups could have being shown as cluster pods"
      return 1
    fi
  done
  echo "Good. Cron backups didn't appear as cluster pods"

  BACKUP_NAME="${CLUSTER_NAME}-${NODE}-$(shuf -i 0-65535 -n 1)"

    cat << EOF | kubectl create -f -
  apiVersion: stackgres.io/v1alpha1
  kind: StackGresBackup
  metadata:
    namespace: "$CLUSTER_NAMESPACE"
    name: "$BACKUP_NAME"
  spec:
    cluster: "$CLUSTER_NAME"
    isPermanent: true
EOF
  
  CHECK_START="$(date +%s)"
  CURRENT_TIME="$(date +%s)"
  while [ $CURRENT_TIME -lt $((CHECK_START+STOP_AT)) ]
  do
    if [ "$RETURNED_PODS" -eq 2 ]
    then
      RETURNED_PODS="$(get_cluster_pod_count)"
      CURRENT_TIME="$(date +%s)"
      sleep 1
    else
      echo "Pods in cluster should be 2 but found $RETURNED_PODS. User initiated backups could have being shown as cluster pods"
      return 1
    fi
  done
  echo "Good. User initiated backups didn't appear as cluster pods"
  
}

remove_cluster_cr_if_exists(){
  if kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
  then
    kubectl delete sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
    
    while kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
    do  
      echo "Waiting for cluster CR to be deleted"
      sleep 2
    done
  fi
}

check_cluster_removed() {
  remove_cluster_cr_if_exists

  local CLUSTER_IN_RESPONSE
  CLUSTER_IN_RESPONSE="$(run_curl -r "stackgres/cluster" \
    | run_jq -c ".[] | select ( .metadata.namespace == \"$CLUSTER_NAMESPACE\" and .metadata.name == \"$CLUSTER_NAME\")" \
    | run_jq '.metadata.name' -r)"

  if [ "$CLUSTER_IN_RESPONSE" = "$CLUSTER_NAME" ]
  then
    echo "Cluster $CLUSTER_NAME wasn't removed from cache"
    return 1
  else
    echo "Cluster $CLUSTER_NAME was removed from cache"
    return 0
  fi

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" -e "-LI -o /dev/null -w %{http_code}")"

  if [ "$HTTP_STATUS" -eq 404 ]
  then
    echo "Cluster $CLUSTER_NAME was not found by the api"
    return 0
  else
    echo "Cluster $CLUSTER_NAME was found by the api"
    return 1
  fi
}

create_cluster_with_api() {
  remove_cluster_cr_if_exists

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X POST -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X POST')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_api_created_cluster_is_visible() {
  create_cluster_with_api

  if kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
  then
    echo "Cluster created with the API"
  else
    echo "Cluster CR was not created"
    return 1
  fi


  check_cluster_directly
}

update_cluster_instances_with_api() {

  CLUSTER_CONFIG=$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o json \
    | run_jq 'del(.metadata.creationTimestamp) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.selfLink) | del(.metadata.uid)' \
    | run_jq ".spec.instances = 2")

  echo "$CLUSTER_CONFIG" > "$LOG_PATH/stackgres-cluster.json"

  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"    
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_api_updated_cluster_is_visible() {
  update_cluster_instances_with_api

  CLUSTER_INSTANCES="$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')"
  if [ "$CLUSTER_INSTANCES" = "2" ]
  then
    echo "Cluster instances were increased"
  else
    echo "Cluster instances weren't increase"
    return 1
  fi

  CLUSTER_INSTANCES="$(run_curl -r "stackgres/cluster/$CLUSTER_NAMESPACE/$CLUSTER_NAME" | run_jq '.spec.instances' -r)"

  if [ "$CLUSTER_INSTANCES" = "2" ]
  then
    echo "Cluster updates are being reflected in the api"
  else
    echo "Cluster updates aren't being reflected in the api"
    return 1
  fi
}

delete_cluster_with_api() {
  local HTTP_STATUS
  HTTP_STATUS="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X DELETE -w %{http_code} -o /dev/null')"

  if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "202" ] || [ "$HTTP_STATUS" = "204" ]
  then
    echo "request acknowledged by the operator"    
    return 0
  else
    ERROR_RESPONSE="$(run_curl -r "stackgres/cluster" -d "$LOG_PATH/stackgres-cluster.json" -e '-X PUT')"
    echo "Invalid response status $HTTP_STATUS. response: $ERROR_RESPONSE"
    return 1
  fi
}

test_api_delete_cluster_is_visible() {
  delete_cluster_with_api

  if wait_until eval '[ "$(get_cluster_http_status)" = "404" ]'
  then
    echo "Cluster removed from the API"
  else
    echo "Cluster wasn't removed from the API"
    return 1
  fi
}
