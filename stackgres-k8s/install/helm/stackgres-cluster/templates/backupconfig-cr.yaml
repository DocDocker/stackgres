{{- /*
Throw an error if create minio without default backup options
*/ -}}
{{- if and .Values.cluster.backup.minio.create (not (and .Values.cluster.create .Values.cluster.backup.create (not (or .Values.cluster.backup.volumeWriteManyStorageClass .Values.cluster.backup.s3 .Values.cluster.backup.gcs .Values.cluster.backup.azureblob)))) -}}
{{- fail "Disable minio creation (--set cluster.backup.minio.create=false) if not using default backup values or not creating backup configuration" -}}
{{- end -}}
{{- /*
Throw an error if not create minio with default backup options
*/ -}}
{{- if and (not .Values.cluster.backup.minio.create) (and .Values.cluster.create .Values.cluster.backup.create (not (or .Values.cluster.backup.volumeWriteManyStorageClass .Values.cluster.backup.s3 .Values.cluster.backup.gcs .Values.cluster.backup.azureblob))) -}}
{{- fail "Enable minio creation (--set cluster.backup.minio.create=true) if using default backup values and creating cluster with backup configuration" -}}
{{- end -}}
{{ if and .Values.cluster.create .Values.cluster.backup.create }}
apiVersion: stackgres.io/{{ .Values.crd.version }}
kind: StackGresBackupConfig
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "stackgres-cluster.name" . }}
    chart: {{ template "stackgres-cluster.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  {{- if .Values.cluster.create }}
  annotations:
    "helm.sh/hook": "pre-install"
  {{- end }}
spec:
  retention: {{ .Values.cluster.backup.retention }}
  fullSchedule: "{{ .Values.cluster.backup.fullSchedule }}"
  fullWindow: {{ .Values.cluster.backup.fullWindow }}
  compressionMethod: "{{ .Values.cluster.backup.compressionMethod }}"
  {{- if .Values.cluster.backup.networkRateLimit }}
  networkRateLimit: {{ .Values.cluster.backup.networkRateLimit }}
  {{- end }}
  {{- if .Values.cluster.backup.diskRateLimit }}
  diskRateLimit: {{ .Values.cluster.backup.diskRateLimit }}
  {{- end }}
  uploadDiskConcurrency: {{ .Values.cluster.backup.uploadDiskConcurrency }}
  {{- if .Values.cluster.backup.pgpSecret }}
  pgpConfiguation:
    key:
      name: "{{ .Values.cluster.backup.pgpConfiguration.name }}"
      key: "{{ .Values.cluster.backup.pgpConfiguration.key }}"
  {{- end }}
  tarSizeThreshold: {{ .Values.cluster.backup.tarSizeThreshold }}
  storage:
    {{- if not (or .Values.cluster.backup.volumeWriteManyStorageClass .Values.cluster.backup.s3 .Values.cluster.backup.gcs .Values.cluster.backup.azureblob) }}
    type: s3
    s3:
      prefix: s3://stackgres
      endpoint: http://{{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
      forcePathStyle: true
      region: k8s
      credentials:
        accessKey:
          name: {{ .Release.Name }}-minio
          key: accesskey
        secretKey:
          name: {{ .Release.Name }}-minio
          key: secretkey
    {{- end }}
    {{- if .Values.cluster.backup.volumeWriteManyStorageClass }}
    type: volume
    volume:
      size: "{{ .Values.cluster.backup.volumeSize }}"
      {{- if .Values.cluster.backup.volumeWriteManyStorageClass }}
      {{- if eq "-" .Values.cluster.backup.volumeWriteManyStorageClass }}
      writeManyStorageClass: ""
      {{- else }}
      writeManyStorageClass: {{ .Values.cluster.backup.volumeWriteManyStorageClass }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if .Values.cluster.backup.s3 }}
    type: s3
    s3:
      prefix: "{{ .Values.cluster.backup.s3.prefix }}"
      credentials:
        accessKey:
          name: "{{ .Values.cluster.backup.s3.accessKey.name }}"
          key: "{{ .Values.cluster.backup.s3.accessKey.key }}"
        secretKey:
          name: "{{ .Values.cluster.backup.s3.secretKey.name }}"
          key: "{{ .Values.cluster.backup.s3.secretKey.key }}"
      {{- if .Values.cluster.backup.s3.region }}
      region: "{{ .Values.cluster.backup.s3.region }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.endpoint }}
      endpoint: "{{ .Values.cluster.backup.s3.endpoint }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.forcePathStyle }}
      forcePathStyle: {{ .Values.cluster.backup.s3.forcePathStyle }}
      {{- end }}
      {{- if .Values.cluster.backup.s3.storageClass }}
      storageClass: "{{ .Values.cluster.backup.s3.storageClass }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.sse }}
      sse: "{{ .Values.cluster.backup.s3.sse }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.sseKmsId }}
      sseKmsId: "{{ .Values.cluster.backup.s3.sseKmsId }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.cseKmsId }}
      cseKmsId: "{{ .Values.cluster.backup.s3.cseKmsId }}"
      {{- end }}
      {{- if .Values.cluster.backup.s3.cseKmsRegion }}
      cseKmsRegion: "{{ .Values.cluster.backup.s3.cseKmsRegion }}"
      {{- end }}
    {{- end }}
    {{- if .Values.cluster.backup.gcs }}
    type: gcs
    gcs:
      prefix: "{{ .Values.cluster.backup.gcs.prefix }}"
      credentials:
        serviceAccountJsonKey:
          name: "{{ .Values.cluster.backup.gcs.serviceAccountJsonKey.name }}"
          key: "{{ .Values.cluster.backup.gcs.serviceAccountJsonKey.key }}"
    {{- end }}
    {{- if .Values.cluster.backup.azureblob }}
    type: azureblob
    azureblob:
      prefix: "{{ .Values.cluster.backup.azureblob.prefix }}"
      credentials:
        account:
          name: "{{ .Values.cluster.backup.azureblobk.account.name }}"
          key: "{{ .Values.cluster.backup.azureblob.account.key }}"
        accessKey:
          name: "{{ .Values.cluster.backup.azureblob.accessKey.name }}"
          key: "{{ .Values.cluster.backup.azureblob.accessKey.key }}"
      {{- if .Values.cluster.backup.azureblob.bufferSize }}
      bufferSize: {{ .Values.cluster.backup.azureblob.bufferSize }}
      {{- end }}
      {{- if .Values.cluster.backup.azureblob.maxBuffers }}
      maxBuffers: {{ .Values.cluster.backup.azureblob.maxBuffers }}
      {{- end }}
    {{- end }}
{{ end }}
