{{- /*
Throw an error if create minio without default backup options
*/ -}}
{{- if and .Values.config.backup.minio.create (not (and .Values.config.create .Values.config.backup.create (not (or .Values.config.backup.s3 .Values.config.backup.s3Compatible .Values.config.backup.gcs .Values.config.backup.azureblob)))) -}}
{{- fail "Disable minio creation (--set config.backup.minio.create=false) if not using default backup values or not creating backup configuration" -}}
{{- end -}}
{{- /*
Throw an error if not create minio with default backup options
*/ -}}
{{- if and (not .Values.config.backup.minio.create) (and .Values.config.create .Values.config.backup.create (not (or .Values.config.backup.s3 .Values.config.backup.s3Compatible .Values.config.backup.gcs .Values.config.backup.azureblob))) -}}
{{- fail "Enable minio creation (--set config.backup.minio.create=true) if using default backup values and creating backup configuration" -}}
{{- end -}}
{{ if and .Values.config.create .Values.config.backup.create }}
apiVersion: stackgres.io/v1beta1
kind: SGBackupConfig
metadata:
  name: {{ .Values.cluster.backupconfig }}
  labels:
    app: {{ template "stackgres-cluster.name" . }}
    chart: {{ template "stackgres-cluster.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  {{- if .Values.cluster.create }}
  annotations:
    "helm.sh/hook": "pre-install"
  {{- end }}
spec:
  baseBackups:
    retention: {{ .Values.config.backup.retention }}
    cronSchedule: "{{ .Values.config.backup.fullSchedule }}"    
    compression: "{{ .Values.config.backup.compressionMethod }}"
    performance:
      {{- if .Values.config.backup.networkRateLimit }}
      maxNetworkBandwitdh: {{ .Values.config.backup.networkRateLimit }}
      {{- end }}
      {{- if .Values.config.backup.diskRateLimit }}
      maxDiskBandwitdh: {{ .Values.config.backup.diskRateLimit }}
      {{- end }}
      uploadDiskConcurrency: {{ .Values.config.backup.uploadDiskConcurrency }}
  storage:
    {{- if not (or .Values.config.backup.s3 .Values.config.backup.s3Compatible .Values.config.backup.gcs .Values.config.backup.azureblob) }}
    type: s3Compatible
    s3Compatible:
      bucket: stackgres
      endpoint: http://{{ .Release.Name }}-minio:9000
      enablePathStyleAddressing: true
      region: k8s
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: {{ .Release.Name }}-minio
            key: accesskey
          secretAccessKey:
            name: {{ .Release.Name }}-minio
            key: secretkey
    {{- end }}
    {{- if .Values.config.backup.s3 }}
    type: s3
    s3:
      bucket: "{{ .Values.config.backup.s3.bucket }}"
      {{- if .Values.config.backup.s3.path }}
      path: "{{ .Values.config.backup.s3.path }}"
      {{- end }}
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: "{{ .Values.config.backup.s3.accessKey.name }}"
            key: "{{ .Values.config.backup.s3.accessKey.key }}"
          secretAccessKey:
            name: "{{ .Values.config.backup.s3.secretKey.name }}"
            key: "{{ .Values.config.backup.s3.secretKey.key }}"
      {{- if .Values.config.backup.s3.region }}
      region: "{{ .Values.config.backup.s3.region }}"
      {{- end }}
      {{- if .Values.config.backup.s3.storageClass }}
      storageClass: "{{ .Values.config.backup.s3.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.config.backup.s3Compatible }}
    type: s3Compatible
    s3Compatible:
      bucket: "{{ .Values.config.backup.s3Compatible.bucket }}"
      {{- if .Values.config.backup.s3Compatible.path }}
      path: "{{ .Values.config.backup.s3Compatible.path }}"
      {{- end }}
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: "{{ .Values.config.backup.s3Compatible.accessKey.name }}"
            key: "{{ .Values.config.backup.s3Compatible.accessKey.key }}"
          secretAccessKey:
            name: "{{ .Values.config.backup.s3Compatible.secretKey.name }}"
            key: "{{ .Values.config.backup.s3Compatible.secretKey.key }}"
      {{- if .Values.config.backup.s3Compatible.region }}
      region: "{{ .Values.config.backup.s3Compatible.region }}"
      {{- end }}
      {{- if .Values.config.backup.s3Compatible.endpoint }}
      endpoint: "{{ .Values.config.backup.s3Compatible.endpoint }}"
      {{- end }}
      {{- if .Values.config.backup.s3Compatible.enablePathStyleAddressing }}
      enablePathStyleAddressing: {{ .Values.config.backup.s3Compatible.enablePathStyleAddressing }}
      {{- end }}
      {{- if .Values.config.backup.s3Compatible.storageClass }}
      storageClass: "{{ .Values.config.backup.s3Compatible.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.config.backup.gcs }}
    type: gcs
    gcs:
      bucket: "{{ .Values.config.backup.gcs.bucket }}"
      {{- if .Values.config.backup.gcs.path }}
      path: "{{ .Values.config.backup.gcs.path }}"
      {{- end }}
      gcpCredentials:
        secretKeySelectors:
          serviceAccountJSON:
            name: "{{ .Values.config.backup.gcs.serviceAccountJsonKey.name }}"
            key: "{{ .Values.config.backup.gcs.serviceAccountJsonKey.key }}"
    {{- end }}
    {{- if .Values.config.backup.azureblob }}
    type: azureBlob
    azureBlob:
      bucket: "{{ .Values.config.backup.azureblob.bucket }}"
      {{- if .Values.config.backup.azureblob.path }}
      path: "{{ .Values.config.backup.azureblob.path }}"
      {{- end }}
      azureCredentials:
        secretKeySelectors:
          storageAccount:
            name: "{{ .Values.config.backup.azureblob.account.name }}"
            key: "{{ .Values.config.backup.azureblob.account.key }}"
          accessKey:
            name: "{{ .Values.config.backup.azureblob.accessKey.name }}"
            key: "{{ .Values.config.backup.azureblob.accessKey.key }}"
    {{- end }}
{{ end }}
