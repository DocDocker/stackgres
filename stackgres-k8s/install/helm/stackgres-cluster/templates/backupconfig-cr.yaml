{{- /*
Throw an error if create minio without default backup options
*/ -}}
{{- if and .Values.config.backup.minio.create (not (and .Values.config.create .Values.config.backup.create (not (or .Values.config.backup.s3 .Values.config.backup.s3compatible .Values.config.backup.gcs .Values.config.backup.azureblob)))) -}}
{{- fail "Disable minio creation (--set config.backup.minio.create=false) if not using default backup values or not creating backup configuration" -}}
{{- end -}}
{{- /*
Throw an error if not create minio with default backup options
*/ -}}
{{- if and (not .Values.config.backup.minio.create) (and .Values.config.create .Values.config.backup.create (not (or .Values.config.backup.s3 .Values.config.backup.s3compatible .Values.config.backup.gcs .Values.config.backup.azureblob))) -}}
{{- fail "Enable minio creation (--set config.backup.minio.create=true) if using default backup values and creating backup configuration" -}}
{{- end -}}
{{ if and .Values.config.create .Values.config.backup.create }}
apiVersion: stackgres.io/v1alpha1
kind: SGBackupConfig
metadata:
  name: {{ .Values.cluster.backupconfig }}
  labels:
    app: {{ template "stackgres-cluster.name" . }}
    chart: {{ template "stackgres-cluster.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  {{- if .Values.cluster.create }}
  annotations:
    "helm.sh/hook": "pre-install"
  {{- end }}
spec:
  retention: {{ .Values.config.backup.retention }}
  fullSchedule: "{{ .Values.config.backup.fullSchedule }}"
  fullWindow: {{ .Values.config.backup.fullWindow }}
  compressionMethod: "{{ .Values.config.backup.compressionMethod }}"
  {{- if .Values.config.backup.networkRateLimit }}
  networkRateLimit: {{ .Values.config.backup.networkRateLimit }}
  {{- end }}
  {{- if .Values.config.backup.diskRateLimit }}
  diskRateLimit: {{ .Values.config.backup.diskRateLimit }}
  {{- end }}
  uploadDiskConcurrency: {{ .Values.config.backup.uploadDiskConcurrency }}
  tarSizeThreshold: {{ .Values.config.backup.tarSizeThreshold }}
  storage:
    {{- if not (or .Values.config.backup.s3 .Values.config.backup.s3compatible .Values.config.backup.gcs .Values.config.backup.azureblob) }}
    type: s3compatible
    s3compatible:
      bucket: stackgres
      endpoint: http://{{ .Release.Name }}-minio:9000
      forcePathStyle: true
      region: k8s
      credentials:
        accessKey:
          name: {{ .Release.Name }}-minio
          key: accesskey
        secretKey:
          name: {{ .Release.Name }}-minio
          key: secretkey
    {{- end }}
    {{- if .Values.config.backup.s3 }}
    type: s3
    s3:
      bucket: "{{ .Values.config.backup.s3.bucket }}"
      {{- if .Values.config.backup.s3.path }}
      path: "{{ .Values.config.backup.s3.path }}"
      {{- end }}
      credentials:
        accessKey:
          name: "{{ .Values.config.backup.s3.accessKey.name }}"
          key: "{{ .Values.config.backup.s3.accessKey.key }}"
        secretKey:
          name: "{{ .Values.config.backup.s3.secretKey.name }}"
          key: "{{ .Values.config.backup.s3.secretKey.key }}"
      {{- if .Values.config.backup.s3.region }}
      region: "{{ .Values.config.backup.s3.region }}"
      {{- end }}
      {{- if .Values.config.backup.s3.storageClass }}
      storageClass: "{{ .Values.config.backup.s3.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.config.backup.s3compatible }}
    type: s3compatible
    s3compatible:
      bucket: "{{ .Values.config.backup.s3compatible.bucket }}"
      {{- if .Values.config.backup.s3compatible.path }}
      path: "{{ .Values.config.backup.s3compatible.path }}"
      {{- end }}
      credentials:
        accessKey:
          name: "{{ .Values.config.backup.s3compatible.accessKey.name }}"
          key: "{{ .Values.config.backup.s3compatible.accessKey.key }}"
        secretKey:
          name: "{{ .Values.config.backup.s3compatible.secretKey.name }}"
          key: "{{ .Values.config.backup.s3compatible.secretKey.key }}"
      {{- if .Values.config.backup.s3compatible.region }}
      region: "{{ .Values.config.backup.s3compatible.region }}"
      {{- end }}
      {{- if .Values.config.backup.s3compatible.endpoint }}
      endpoint: "{{ .Values.config.backup.s3compatible.endpoint }}"
      {{- end }}
      {{- if .Values.config.backup.s3compatible.forcePathStyle }}
      forcePathStyle: {{ .Values.config.backup.s3compatible.forcePathStyle }}
      {{- end }}
      {{- if .Values.config.backup.s3compatible.storageClass }}
      storageClass: "{{ .Values.config.backup.s3compatible.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.config.backup.gcs }}
    type: gcs
    gcs:
      bucket: "{{ .Values.config.backup.gcs.bucket }}"
      {{- if .Values.config.backup.gcs.path }}
      path: "{{ .Values.config.backup.gcs.path }}"
      {{- end }}
      credentials:
        serviceAccountJsonKey:
          name: "{{ .Values.config.backup.gcs.serviceAccountJsonKey.name }}"
          key: "{{ .Values.config.backup.gcs.serviceAccountJsonKey.key }}"
    {{- end }}
    {{- if .Values.config.backup.azureblob }}
    type: azureblob
    azureblob:
      bucket: "{{ .Values.config.backup.azureblob.bucket }}"
      {{- if .Values.config.backup.azureblob.path }}
      path: "{{ .Values.config.backup.azureblob.path }}"
      {{- end }}
      credentials:
        account:
          name: "{{ .Values.config.backup.azureblob.account.name }}"
          key: "{{ .Values.config.backup.azureblob.account.key }}"
        accessKey:
          name: "{{ .Values.config.backup.azureblob.accessKey.name }}"
          key: "{{ .Values.config.backup.azureblob.accessKey.key }}"
    {{- end }}
{{ end }}
