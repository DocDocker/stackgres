{{- /*
Throw an error if create minio without default backup options
*/ -}}
{{- if and .Values.minio.create (not (and .Values.configurations.create .Values.configurations.backupconfig.create (not (or .Values.configurations.backupconfig.storage.s3 .Values.configurations.backupconfig.storage.s3Compatible .Values.configurations.backupconfig.storage.gcs .Values.configurations.backupconfig.storage.azureBlob)))) -}}
{{- fail "Disable minio creation (--set minio.create=false) if not using default backup values or not creating backup configuration" -}}
{{- end -}}
{{- /*
Throw an error if not create minio with default backup options
*/ -}}
{{- if and (not .Values.minio.create) (and .Values.configurations.create .Values.configurations.backupconfig.create (not (or .Values.configurations.backupconfig.storage.s3 .Values.configurations.backupconfig.storage.s3Compatible .Values.configurations.backupconfig.storage.gcs .Values.configurations.backupconfig.storage.azureBlob))) -}}
{{- fail "Enable minio creation (--set minio.create=true) if using default backup values and creating backup configuration" -}}
{{- end -}}
{{ if and .Values.configurations.create .Values.configurations.backupconfig.create }}
apiVersion: stackgres.io/v1beta1
kind: SGBackupConfig
metadata:
  name: {{ .Values.cluster.configurations.sgBackupConfig }}
  labels:
    app: {{ template "stackgres-cluster.name" . }}
    chart: {{ template "stackgres-cluster.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  {{- if .Values.cluster.create }}
  annotations:
    "helm.sh/hook": "pre-install"
  {{- end }}
spec:
  baseBackups:
    retention: {{ .Values.configurations.backupconfig.baseBackups.retention }}
    cronSchedule: "{{ .Values.configurations.backupconfig.baseBackups.cronSchedule }}"
    compression: "{{ .Values.configurations.backupconfig.baseBackups.compression }}"
    performance:
      {{- if .Values.configurations.backupconfig.baseBackups.performance.maxNetworkBandwitdh }}
      maxNetworkBandwitdh: {{ .Values.configurations.backupconfig.baseBackups.performance.maxNetworkBandwitdh }}
      {{- end }}
      {{- if .Values.configurations.backupconfig.baseBackups.performance.maxDiskBandwitdh }}
      maxDiskBandwitdh: {{ .Values.configurations.backupconfig.baseBackups.performance.maxDiskBandwitdh }}
      {{- end }}
      uploadDiskConcurrency: {{ .Values.configurations.backupconfig.baseBackups.performance.uploadDiskConcurrency }}
  storage:
    {{- if not (or .Values.configurations.backupconfig.storage.s3 .Values.configurations.backupconfig.storage.s3Compatible .Values.configurations.backupconfig.storage.gcs .Values.configurations.backupconfig.storage.azureBlob) }}
    type: s3Compatible
    s3Compatible:
      bucket: stackgres
      endpoint: http://{{ .Release.Name }}-minio:9000
      enablePathStyleAddressing: true
      region: k8s
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: {{ .Release.Name }}-minio
            key: accesskey
          secretAccessKey:
            name: {{ .Release.Name }}-minio
            key: secretkey
    {{- end }}
    {{- if .Values.configurations.backupconfig.storage.s3 }}
    type: s3
    s3:
      bucket: "{{ .Values.configurations.backupconfig.storage.s3.bucket }}"
      {{- if .Values.configurations.backupconfig.storage.s3.path }}
      path: "{{ .Values.configurations.backupconfig.storage.s3.path }}"
      {{- end }}
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: "{{ .Values.configurations.backupconfig.storage.s3.awsCredentials.secretKeySelectors.accessKeyId.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.s3.awsCredentials.secretKeySelectors.accessKeyId.key }}"
          secretAccessKey:
            name: "{{ .Values.configurations.backupconfig.storage.s3.awsCredentials.secretKeySelectors.secretAccessKey.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.s3.awsCredentials.secretKeySelectors.secretAccessKey.key }}"
      {{- if .Values.configurations.backupconfig.storage.s3.region }}
      region: "{{ .Values.configurations.backupconfig.storage.s3.region }}"
      {{- end }}
      {{- if .Values.configurations.backupconfig.storage.s3.storageClass }}
      storageClass: "{{ .Values.configurations.backupconfig.storage.s3.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.configurations.backupconfig.storage.s3Compatible }}
    type: s3Compatible
    s3Compatible:
      bucket: "{{ .Values.configurations.backupconfig.storage.s3Compatible.bucket }}"
      {{- if .Values.configurations.backupconfig.storage.s3Compatible.path }}
      path: "{{ .Values.configurations.backupconfig.storage.s3Compatible.path }}"
      {{- end }}
      awsCredentials:
        secretKeySelectors:
          accessKeyId:
            name: "{{ .Values.configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.accessKeyId.key }}"
          secretAccessKey:
            name: "{{ .Values.configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.s3Compatible.awsCredentials.secretKeySelectors.secretAccessKey.key }}"
      {{- if .Values.configurations.backupconfig.storage.s3Compatible.region }}
      region: "{{ .Values.configurations.backupconfig.storage.s3Compatible.region }}"
      {{- end }}
      {{- if .Values.configurations.backupconfig.storage.s3Compatible.endpoint }}
      endpoint: "{{ .Values.configurations.backupconfig.storage.s3Compatible.endpoint }}"
      {{- end }}
      {{- if .Values.configurations.backupconfig.storage.s3Compatible.enablePathStyleAddressing }}
      enablePathStyleAddressing: {{ .Values.configurations.backupconfig.storage.s3Compatible.enablePathStyleAddressing }}
      {{- end }}
      {{- if .Values.configurations.backupconfig.storage.s3Compatible.storageClass }}
      storageClass: "{{ .Values.configurations.backupconfig.storage.s3Compatible.storageClass }}"
      {{- end }}
    {{- end }}
    {{- if .Values.configurations.backupconfig.storage.gcs }}
    type: gcs
    gcs:
      bucket: "{{ .Values.configurations.backupconfig.storage.gcs.bucket }}"
      {{- if .Values.configurations.backupconfig.storage.gcs.path }}
      path: "{{ .Values.configurations.backupconfig.storage.gcs.path }}"
      {{- end }}
      gcpCredentials:
        secretKeySelectors:
          serviceAccountJSON:
            name: "{{ .Values.configurations.backupconfig.storage.gcs.gcpCredentials.secretKeySelectors.serviceAccountJSON.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.gcs.gcpCredentials.secretKeySelectors.serviceAccountJSON.key }}"
    {{- end }}
    {{- if .Values.configurations.backupconfig.storage.azureBlob }}
    type: azureBlob
    azureBlob:
      bucket: "{{ .Values.configurations.backupconfig.storage.azureBlob.bucket }}"
      {{- if .Values.configurations.backupconfig.storage.azureBlob.path }}
      path: "{{ .Values.configurations.backupconfig.storage.azureBlob.path }}"
      {{- end }}
      azureCredentials:
        secretKeySelectors:
          storageAccount:
            name: "{{ .Values.configurations.backupconfig.storage.azureBlob.azureCredentials.secretKeySelectors.storageAccount.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.azureBlob.azureCredentials.secretKeySelectors.storageAccount.key }}"
          accessKey:
            name: "{{ .Values.configurations.backupconfig.storage.azureBlob.azureCredentials.secretKeySelectors.accessKey.name }}"
            key: "{{ .Values.configurations.backupconfig.storage.azureBlob.azureCredentials.secretKeySelectors.accessKey.key }}"
    {{- end }}
{{ end }}
