{{ if and (or (not .Values.cert.key) (not .Values.cert.crt)) .Values.deploy.create }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-create-certificate"
  namespace: {{ .Release.Namespace }}
  labels:
    app: stackgres-create-certificate
    scope: init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: stackgres-create-certificate
        scope: init
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
      - name: "{{ .Release.Name }}-create-certificate"
        image: "bitnami/kubectl:latest"
        imagePullPolicy: "Always"
        command:
          - "/bin/bash"
          - "-ecx"
          - |
            kubectl delete csr --ignore-not-found '{{ .Release.Name }}'
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}
            kubectl delete mutatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}
            cat << EOF > /tmp/csr.conf
            [req]
            req_extensions = v3_req
            distinguished_name = req_distinguished_name
            [req_distinguished_name]
            [ v3_req ]
            basicConstraints = CA:FALSE
            keyUsage = nonRepudiation, digitalSignature, keyEncipherment
            extendedKeyUsage = serverAuth
            subjectAltName = @alt_names
            [alt_names]
            DNS.1 = {{ .Release.Name }}
            DNS.2 = {{ .Release.Name }}.{{ .Release.Namespace }}
            DNS.3 = {{ .Release.Name }}.{{ .Release.Namespace }}.svc
            DNS.4 = {{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local
            EOF
            
            openssl req -new -nodes -text -keyout /tmp/root.key \
                -subj "/CN={{ .Release.Name }}.{{ .Release.Namespace }}.svc" \
                -out /tmp/server.csr \
                -config /tmp/csr.conf
            
            cat << EOF | kubectl create -f -
            apiVersion: certificates.k8s.io/v1beta1
            kind: CertificateSigningRequest
            metadata:
              name: {{ .Release.Name }}
              namespace: {{ .Release.Namespace }}
            spec:
              request: "$(cat /tmp/server.csr | base64 | tr -d '\n')"
              usages:
              - digital signature
              - key encipherment
              - server auth
            EOF
            
            if ! kubectl get csr '{{ .Release.Name }}' -o yaml|grep -q '^    type: Approved$'
            then
              {{- if .Values.cert.autoapprove }}
              kubectl certificate approve '{{ .Release.Name }}'
              {{- end }}
              echo -n "Waiting for CSR approval..."
              until kubectl get csr '{{ .Release.Name }}' -o yaml|grep -q '^    type: Approved$'
              do
                echo -n .
                sleep 5
              done
              echo approved
            fi
            KEY="$(cat /tmp/root.key | base64 | tr -d '\n')"
            CRT="$(kubectl get csr '{{ .Release.Name }}' -o jsonpath='{.status.certificate}')"
            
            if [ -z "$CRT" ]
            then
              echo "Certificate not found in CSR!"
              exit 1
            fi
            
            {{- $values := . }}
            {{- $_ := set $values.Values.cert "crt" "${CRT}" }}
            {{- $_ := set $values.Values.cert "key" "${KEY}" }}
            cat << EOF | kubectl create -f -
            {{- include (print $.Template.BasePath "/validating-webhook-configuration.yaml") . | indent 12 }}
            EOF
            cat << EOF | kubectl create -f -
            {{- include (print $.Template.BasePath "/mutating-webhook-configuration.yaml") . | indent 12 }}
            EOF
            cat << EOF | kubectl create -f -
            {{- include (print $.Template.BasePath "/certificate-secret.yaml") . | indent 12 }}
            EOF
            
            {{- if .Release.IsInstall }}
            kubectl scale --timeout 1h --replicas 1 -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}'
            {{- else }}
            kubectl rollout restart -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}'
            {{- end }}
            kubectl wait --timeout 1h --for=condition=Ready -n '{{ .Release.Namespace }}' pod -l app=stackgres-operator --all
      restartPolicy: OnFailure
{{ end }}
