{{ if .Values.deploy.create }}
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app: {{ .Release.Name }}
    version: "{{ .Chart.Version }}"
    group: {{ .Values.group }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      version: "{{ .Chart.Version }}"
      group: {{ .Values.group }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        version: "{{ .Chart.Version }}"
        group: {{ .Values.group }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: OPERATOR_NAME
            value: "{{ .Release.Name }}"
          - name: OPERATOR_NAMESPACE
            value: "{{ .Release.Namespace }}"
          - name: CRD_GROUP
            value: "{{ .Values.group }}"
          - name: CRD_VERSION
            value: "{{ .Values.crd.version }}"
          - name: CONTAINER_BUILD
            value: "{{ .Values.containerBuild }}"
          - name: PROMETHEUS_AUTOBIND
            value: "{{ .Values.prometheus.allowAutobind }}"
          {{- if .Values.developer.logLevel }}
          - name: OPERATOR_LOG_LEVEL
            value: "{{ .Values.developer.logLevel }}"
          {{- end }}
          {{- if .Values.developer.showStackTraces }}
          - name: OPERATOR_SHOW_STACK_TRACES
            value: "{{ .Values.developer.showStackTraces }}"
          {{- end }}
          {{- if .Values.developer.enableJvmDebug }}
          - name: DEBUG_OPERATOR
            value: "{{ .Values.developer.enableJvmDebug }}"
          {{- end }}
          {{- if .Values.developer.enableJvmDebugSuspend }}
          - name: DEBUG_OPERATOR_SUSPEND
            value: "{{ .Values.developer.enableJvmDebugSuspend }}"
          {{- end }}
          - name: OPERATOR_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- if and .Values.grafana.url .Values.grafana.token .Values.grafana.httpHost }}
          - name: GRAFANA_EMBEDDED          
            value: "true"
          {{ end }}
        ports:
        - containerPort: 8080
          name: "http"
          protocol: "TCP"
        - containerPort: 8443
          name: "https"
          protocol: "TCP"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 2
        volumeMounts:
          - name: operator-certs
            mountPath: /etc/operator/certs
            readOnly: true
      - name: {{ .Release.Name }}-nginx
        image: "nginx:1.17.4-alpine"
        imagePullPolicy: IfNotPresent
        args: [ '/bin/sh', '-exc', 'cat /etc/nginx/conf.d/stackgres-operator.conf; nginx -g "daemon off;";' ]
        ports:
        - containerPort: 443
          name: "https"
          protocol: "TCP"
        volumeMounts:
          - name: operator-certs
            mountPath: /etc/operator/certs
            readOnly: true
          - name: operator-nginx
            mountPath: /etc/nginx/conf.d
            readOnly: true
      volumes:
        - name: operator-certs
          secret:
            secretName: {{ .Release.Name }}
        - name: operator-nginx
          configMap:
            name: {{ .Release.Name }}-nginx
{{ end }}
