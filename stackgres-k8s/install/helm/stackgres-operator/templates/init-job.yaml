{{- if and (or (not .Values.cert.key) (not .Values.cert.crt)) .Values.deploy.create }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-init"
  namespace: {{ .Release.Namespace }}
  labels:
    app: StackGres
    scope: init
spec:
  template:
    metadata:
      labels:
        app: StackGres
        scope: init
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
      - name: "{{ .Release.Name }}-init"
        image: "bitnami/kubectl:latest"
        imagePullPolicy: "Always"
        command:
          - "/bin/bash"
          - "-ecx"
          - |
            kubectl delete csr --ignore-not-found {{ .Release.Name }}
            kubectl delete secret --ignore-not-found {{ .Release.Name }}-init
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}-sgcluster
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}-sgpgconfig
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}-sgpgbouncer
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}-sgprofile
            kubectl delete validatingwebhookconfiguration --ignore-not-found {{ .Release.Name }}-sgbackupconfig
            cat << EOF > /tmp/csr.conf
            [req]
            req_extensions = v3_req
            distinguished_name = req_distinguished_name
            [req_distinguished_name]
            [ v3_req ]
            basicConstraints = CA:FALSE
            keyUsage = nonRepudiation, digitalSignature, keyEncipherment
            extendedKeyUsage = serverAuth
            subjectAltName = @alt_names
            [alt_names]
            DNS.1 = {{ .Release.Name }}
            DNS.2 = {{ .Release.Name }}.{{ .Release.Namespace }}
            DNS.3 = {{ .Release.Name }}.{{ .Release.Namespace }}.svc
            DNS.4 = {{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local
            EOF
            
            openssl req -new -nodes -text -keyout /tmp/root.key \
                -subj "/CN={{ .Release.Name }}.{{ .Release.Namespace }}.svc" \
                -out /tmp/server.csr \
                -config /tmp/csr.conf
            
            cat << EOF | kubectl create -f -
            apiVersion: certificates.k8s.io/v1beta1
            kind: CertificateSigningRequest
            metadata:
              name: {{ .Release.Name }}
              namespace: {{ .Release.Namespace }}
            spec:
              request: $(cat /tmp/server.csr | base64 | tr -d '\n')
              usages:
              - digital signature
              - key encipherment
              - server auth
            EOF
            
            if ! kubectl get csr {{ .Release.Name }} -o yaml|grep -q '^    type: Approved$'
            then
              {{- if .Values.cert.autoapprove }}
              kubectl certificate approve {{ .Release.Name }}
              {{- end }}
              echo -n "Waiting for CSR approval..."
              until kubectl get csr {{ .Release.Name }} -o yaml|grep -q '^    type: Approved$'
              do
                echo -n .
                sleep 5
              done
              echo approved
            fi
            KEY="$(cat /tmp/root.key | base64 | tr -d '\n')"
            CRT="$(kubectl get csr \
              {{ .Release.Name }} \
              -o jsonpath='{.status.certificate}')"
            
            {{- if .Values.validator.create }}
            cat << EOF | kubectl create -f -
            {{- include (print $.Template.BasePath "/validation-webhook-configuration.yaml") (dict "Release" .Release "Chart" .Chart "Files" .Files "Capabilities" .Capabilities "Values" (merge dict .Values (dict "cert" (dict "crt" "${CRT}" "key" "${KEY}")))) | splitList "\n" | join "\n            " }}
            EOF
            {{ end }}
            cat << EOF | kubectl create -f -
            {{- include (print $.Template.BasePath "/secret.yaml") (dict "Release" .Release "Chart" .Chart "Files" .Files "Capabilities" .Capabilities "Values" (merge dict .Values (dict "cert" (dict "crt" "${CRT}" "key" "${KEY}")))) | splitList "\n" | join "\n            " }}
            EOF
      restartPolicy: OnFailure
{{ end }}
