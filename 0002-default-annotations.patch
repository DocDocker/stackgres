From 60091bfe3c9becfb43d434c502449b526a0f9afa Mon Sep 17 00:00:00 2001
From: Xavier Sierra <xaviersb@ongres.com>
Date: Fri, 17 Jan 2020 16:31:32 +0100
Subject: [PATCH 2/2] default annotations

---
 .../e2e/spec/backup-with-default-storage      |  21 ++-
 stackgres-k8s/e2e/spec/default-mutator        |  69 +++++++-
 .../mutator-webhook-configuration.yaml        |  21 +++
 .../operatorframework/JsonPatchMutator.java   |   1 -
 .../operatorframework/MutationResource.java   |   2 +-
 .../mutation/AbstractAnnotationMutator.java   |  37 ++++-
 .../BackupConfigMutationResource.java         |   6 +-
 .../mutation/BackupMutationResource.java      |  46 +++++-
 .../mutation/DefaultAnnotationMutator.java    |  81 +++++++++-
 .../operator/mutation/MutationUtil.java       |  21 ++-
 .../mutation/RestoreConfigMutator.java        |   2 +-
 .../backup/BackupAnnotationMutator.java       |  11 +-
 .../mutation/backup/BackupMutator.java        |  10 +-
 .../mutation/backup/BackupPipeline.java       |  35 ++++-
 .../backupconfig/BackupAnnotationMutator.java |   2 +-
 .../BackupConfigDefaultValuesMutator.java     |   2 +-
 .../mutation/backupconfig/BackupMutator.java  |   2 +-
 .../mutation/backupconfig/BackupPipeline.java |   2 +-
 .../cluster/ClusterAnnotationMutator.java     |  11 +-
 .../pgbouncer/PgBouncerAnnotationMutator.java |  11 +-
 .../pgconfig/PgConfigAnnotationMutator.java   |  11 +-
 .../profile/ProfileAnnotationMutator.java     |  11 +-
 .../restore/RestoreAnnotationsMutator.java    |  17 +-
 .../operator/validation/ValidationUtil.java   |  22 ++-
 .../BackupConfigMutationResourceTest.java     |   4 +-
 .../mutation/BackupMutationResourceTest.java  |  17 +-
 .../BackupConfigDefaultValuesMutatorTest.java |   4 +-
 .../RestoreAnnotationsMutatorTest.java        | 148 +++++++++++++++++-
 .../backup_allow_request/create.json          |  61 ++++++++
 29 files changed, 628 insertions(+), 60 deletions(-)

diff --git a/stackgres-k8s/e2e/spec/backup-with-default-storage b/stackgres-k8s/e2e/spec/backup-with-default-storage
index f0adf54..e9dd02a 100644
--- a/stackgres-k8s/e2e/spec/backup-with-default-storage
+++ b/stackgres-k8s/e2e/spec/backup-with-default-storage
@@ -21,7 +21,9 @@ EOF
   create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
     -f "$LOG_PATH/minio-affinity.yaml"
 
-  wait_pods_running "$CLUSTER_NAMESPACE" 3
+  deploy_curl_pod "$CLUSTER_NAMESPACE"
+
+  wait_pods_running "$CLUSTER_NAMESPACE" 4
 
   # Avoid backups before waiting for pods (since backup pods could biase the wait)
   kubectl patch sgbackupconfig -n "$CLUSTER_NAMESPACE" backupconf --type json \
@@ -117,18 +119,30 @@ EOF
     return 1
   fi
 
-  BACKUP_NAME="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
+  ACTUAL_BACKUP_NAME="$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE" "$BACKUP_NAME" \
     -o custom-columns=BACKUP_NAME:.status.name,PHASE:.status.phase,HOSTNAME:.status.hostname \
     | tail -n +2 | grep " Completed   ${CLUSTER_NAME}-${NODE}$" | tail -n 1 | cut -d ' ' -f 1)"
   
   if [ "$(kubectl exec -t -n "$CLUSTER_NAMESPACE" "${CLUSTER_NAME}-${NODE}" -c patroni -- \
-      wal-g backup-list | grep "^$BACKUP_NAME " | wc -l)" -gt 0 ]
+      wal-g backup-list | grep "^$ACTUAL_BACKUP_NAME " | wc -l)" -gt 0 ]
   then
     echo "SUCCESS. The full backup of created CR is available"
   else
     echo "FAIL. The full backup of created CR is not available"
     return 1
   fi
+
+  local DEFAULT_ANNOTATION=$(kubectl get sgbackup -n $CLUSTER_NAMESPACE $BACKUP_NAME -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')
+
+  if [ -z $DEFAULT_ANNOTATION ] || [ "$DEFAULT_ANNOTATION" = "null" ]
+  then
+    echo "Fail. Default annotations not created"
+    return 1
+  else
+    echo "Success. Defaults annotations created"    
+  fi
+
+
 }
 
 check_switchover() {
@@ -165,3 +179,4 @@ check_switchover() {
     return 1
   fi
 }
+
diff --git a/stackgres-k8s/e2e/spec/default-mutator b/stackgres-k8s/e2e/spec/default-mutator
index 0c05249..f522dca 100644
--- a/stackgres-k8s/e2e/spec/default-mutator
+++ b/stackgres-k8s/e2e/spec/default-mutator
@@ -7,10 +7,12 @@ e2e_test_install() {
   PGCBOUNCER="pgbouncer"
   DEFAULT_PGCBOUNCER="defaultpgbouncer"
   DEFAULT_PROFILE="defaultprofile"
-  DEFAULT_BACKUP="defaultbackupconfig"
-
+  BACKUP_CONFIG="backupconfig"
+  DEFAULT_BACKUP_CONFIG="defaultbackupconfig"
+  
   kubectl create namespace "$CLUSTER_NAMESPACE"
   deploy_curl_pod "$CLUSTER_NAMESPACE"
+  wait_pods_running "$CLUSTER_NAMESPACE" 1
 }
 
 e2e_test_uninstall() {
@@ -48,6 +50,16 @@ EOF
     return 1
   fi
 
+  local DEFAULT_ANNOTATION=$(kubectl get sgpgconfigs.stackgres.io -n $CLUSTER_NAMESPACE $PGCONFIG -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')
+
+  if [ -z "$DEFAULT_ANNOTATION" ] || [ "$DEFAULT_ANNOTATION" = "null" ]
+  then
+    echo "Fail. Default annotations not created"
+    return 1
+  else
+    echo "Success. Defaults annotations created"
+  fi
+
 }
 
 create_empty_pg_bouncer(){
@@ -73,6 +85,50 @@ EOF
     echo "Fail. Default fields not created"
     return 1
   fi
+
+  local DEFAULT_ANNOTATION=$(kubectl get sgconnectionpoolingconfigs.stackgres.io -n $CLUSTER_NAMESPACE $PGCBOUNCER -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')
+
+  if [ -z "$DEFAULT_ANNOTATION" ] || [ "$DEFAULT_ANNOTATION" = "null" ]
+  then
+    echo "Fail. Default annotations not created"
+    return 1
+  else
+    echo "Success. Defaults annotations created"
+  fi
+}
+
+create_empty_pg_backup_config(){
+
+  cat << EOF | kubectl apply -f -
+  apiVersion: stackgres.io/v1alpha1
+  kind: StackGresBackupConfig
+  metadata:
+    name: $BACKUP_CONFIG
+    namespace: $CLUSTER_NAMESPACE
+  spec:
+    compressionMethod=lz4
+EOF
+
+  local CREATED_FIELDS=$(kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUP_CONFIG -o json | run_jq '.spec | length')
+  local DEFAULT_FIELDS=$(kubectl get sgbackupconfigs.stackgres.io -n $OPERATOR_NAMESPACE $DEFAULT_BACKUP_CONFIG -o json | run_jq '.spec | length')
+
+  if [ $CREATED_FIELDS = $((DEFAULT_FIELDS + 1)) ]
+  then
+    echo "Success. Defaults fields created"
+  else
+    echo "Fail. Default fields not created"
+    return 1
+  fi
+
+  local DEFAULT_ANNOTATION=$(kubectl get sgbackupconfigs.stackgres.io -n $CLUSTER_NAMESPACE $BACKUP_CONFIG -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')
+
+  if [ -z "$DEFAULT_ANNOTATION" ] || [ "$DEFAULT_ANNOTATION" = "null" ]
+  then
+    echo "Fail. Default annotations not created"
+    return 1
+  else
+    echo "Success. Defaults annotations created"
+  fi
 }
 
 create_empty_cluster(){
@@ -161,5 +217,14 @@ EOF
     return 1
   fi
 
+  local DEFAULT_ANNOTATION=$(kubectl get sgclusters.stackgres.io -n $CLUSTER_NAMESPACE $CLUSTER_NAME -o json | run_jq '.metadata.annotations["stackgres.io/operatorVersion"]')
+
+  if [ -z "$DEFAULT_ANNOTATION" ] || [ "$DEFAULT_ANNOTATION" = "null" ]
+  then
+    echo "Fail. Default annotations not created"
+    return 1
+  else
+    echo "Success. Defaults annotations created"    
+  fi
 
 }
\ No newline at end of file
diff --git a/stackgres-k8s/install/helm/stackgres-operator/templates/mutator-webhook-configuration.yaml b/stackgres-k8s/install/helm/stackgres-operator/templates/mutator-webhook-configuration.yaml
index 006e87e..719f769 100644
--- a/stackgres-k8s/install/helm/stackgres-operator/templates/mutator-webhook-configuration.yaml
+++ b/stackgres-k8s/install/helm/stackgres-operator/templates/mutator-webhook-configuration.yaml
@@ -124,5 +124,26 @@ webhooks:
         name: {{ .Release.Name }}
         path: '/stackgres/mutation/sgrestoreconfig'
       caBundle: {{ .Values.cert.crt }}
+---
+apiVersion: admissionregistration.k8s.io/v1beta1
+kind: MutatingWebhookConfiguration
+metadata:
+  name: {{ .Release.Name }}-sgbackup
+  namespace: {{ .Release.Namespace }}
+webhooks:
+  - name: sgbackup.{{ .Release.Name }}.{{ .Release.Namespace }}
+    sideEffects: None
+    rules:
+      - operations: ["CREATE"]
+        apiGroups: ["stackgres.io"]
+        apiVersions: ["*"]
+        resources: ["sgbackups"]
+    failurePolicy: Fail
+    clientConfig:
+      service:
+        namespace: {{ .Release.Namespace }}
+        name: {{ .Release.Name }}
+        path: '/stackgres/mutation/sgbackup'
+      caBundle: {{ .Values.cert.crt }}
 {{ end }}
 
diff --git a/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/JsonPatchMutator.java b/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/JsonPatchMutator.java
index afd12a1..4c979ac 100644
--- a/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/JsonPatchMutator.java
+++ b/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/JsonPatchMutator.java
@@ -24,7 +24,6 @@ public interface JsonPatchMutator<T> {
   }
 
   default JsonPatchOperation buildAddOperation(JsonPointer path, String value) {
-
     return new AddOperation(path, FACTORY.textNode(value));
   }
 
diff --git a/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/MutationResource.java b/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/MutationResource.java
index 7a2df5a..4111b38 100644
--- a/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/MutationResource.java
+++ b/stackgres-k8s/src/operator-framework/src/main/java/io/stackgres/operatorframework/MutationResource.java
@@ -48,7 +48,7 @@ public interface MutationResource<T extends AdmissionReview<?>> {
     } catch (Exception ex) {
       Result result = new Result(500, Optional.ofNullable(ex.getMessage()).orElse("null"));
       logger.error("cannot proceed with request "
-          + requestUid.toString() + " cause: " + result.getMessage());
+          + requestUid.toString() + " cause: " + result.getMessage(), ex);
       response.setAllowed(false);
       response.setStatus(result);
     }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/AbstractAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/AbstractAnnotationMutator.java
index a03f8d1..363ae6b 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/AbstractAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/AbstractAnnotationMutator.java
@@ -1,4 +1,39 @@
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
+
 package io.stackgres.operator.mutation;
 
-public class AbstractAnnotationMutator {
+import java.util.List;
+import javax.inject.Inject;
+
+import com.github.fge.jsonpatch.JsonPatchOperation;
+import com.google.common.collect.ImmutableList;
+import io.fabric8.kubernetes.client.CustomResource;
+import io.stackgres.operator.common.ConfigContext;
+import io.stackgres.operatorframework.AdmissionRequest;
+import io.stackgres.operatorframework.AdmissionReview;
+import io.stackgres.operatorframework.Operation;
+
+public abstract class AbstractAnnotationMutator
+    <R extends CustomResource, T extends AdmissionReview<R>>
+    implements DefaultAnnotationMutator<R, T> {
+
+  private ConfigContext configContext;
+
+  @Override
+  public List<JsonPatchOperation> mutate(T review) {
+    AdmissionRequest<R> request = review.getRequest();
+    if (request.getOperation() == Operation.CREATE) {
+      return getAnnotationsToAdd(request.getObject(), configContext);
+    } else {
+      return ImmutableList.of();
+    }
+  }
+
+  @Inject
+  public void setConfigContext(ConfigContext configContext) {
+    this.configContext = configContext;
+  }
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupConfigMutationResource.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupConfigMutationResource.java
index dcf6238..bdec96b 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupConfigMutationResource.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupConfigMutationResource.java
@@ -24,15 +24,15 @@ import org.slf4j.LoggerFactory;
 @Path(MutationUtil.BACKUPCONFIG_MUTATION_PATH)
 @Produces(MediaType.APPLICATION_JSON)
 @Consumes(MediaType.APPLICATION_JSON)
-public class BackupMutationResource implements MutationResource<BackupConfigReview> {
+public class BackupConfigMutationResource implements MutationResource<BackupConfigReview> {
 
   private static final Logger LOGGER = LoggerFactory
-      .getLogger(BackupMutationResource.class);
+      .getLogger(BackupConfigMutationResource.class);
 
   private JsonPatchMutationPipeline<BackupConfigReview> pipeline;
 
   @Inject
-  public BackupMutationResource(JsonPatchMutationPipeline<BackupConfigReview> pipeline) {
+  public BackupConfigMutationResource(JsonPatchMutationPipeline<BackupConfigReview> pipeline) {
     this.pipeline = pipeline;
   }
 
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupMutationResource.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupMutationResource.java
index 69ea257..36b4278 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupMutationResource.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/BackupMutationResource.java
@@ -1,4 +1,48 @@
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
+
 package io.stackgres.operator.mutation;
 
-public class BackupMutationResource {
+import javax.enterprise.event.Observes;
+import javax.inject.Inject;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+
+import io.quarkus.runtime.StartupEvent;
+import io.stackgres.operator.common.BackupReview;
+import io.stackgres.operatorframework.AdmissionReviewResponse;
+import io.stackgres.operatorframework.JsonPatchMutationPipeline;
+import io.stackgres.operatorframework.MutationResource;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+@Path(MutationUtil.BACKUP_MUTATION_PATH)
+@Produces(MediaType.APPLICATION_JSON)
+@Consumes(MediaType.APPLICATION_JSON)
+public class BackupMutationResource implements MutationResource<BackupReview> {
+
+  private static final Logger LOGGER = LoggerFactory
+      .getLogger(BackupMutationResource.class);
+
+  private JsonPatchMutationPipeline<BackupReview> pipeline;
+
+  @Inject
+  public BackupMutationResource(JsonPatchMutationPipeline<BackupReview> pipeline) {
+    this.pipeline = pipeline;
+  }
+
+  void onStart(@Observes StartupEvent ev) {
+    LOGGER.info("Backup mutation resource started");
+  }
+
+  @POST
+  @Override
+  public AdmissionReviewResponse mutate(BackupReview admissionReview) {
+    return mutate(admissionReview, pipeline);
+  }
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/DefaultAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/DefaultAnnotationMutator.java
index ab59c3d..9189aeb 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/DefaultAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/DefaultAnnotationMutator.java
@@ -1,4 +1,83 @@
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
+
 package io.stackgres.operator.mutation;
 
-public interface DefaultAnnotationMutator {
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.stream.Collectors;
+
+import com.github.fge.jackson.jsonpointer.JsonPointer;
+import com.github.fge.jsonpatch.AddOperation;
+import com.github.fge.jsonpatch.JsonPatchOperation;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import io.fabric8.kubernetes.client.CustomResource;
+import io.stackgres.operator.common.ConfigContext;
+import io.stackgres.operator.common.ConfigProperty;
+import io.stackgres.operatorframework.AdmissionReview;
+import io.stackgres.operatorframework.JsonPatchMutator;
+
+public interface DefaultAnnotationMutator<R extends CustomResource, T extends AdmissionReview<R>>
+    extends JsonPatchMutator<T> {
+
+  JsonPointer ANNOTATION_POINTER = JsonPointer.of("metadata", "annotations");
+
+  String STACKGRES_PREFIX = "stackgres.io/";
+
+  default List<JsonPatchOperation> getAnnotationsToAdd(R resouce, ConfigContext configContext) {
+
+    Optional<Map<String, String>> crAnnotations = Optional
+        .ofNullable(resouce.getMetadata().getAnnotations());
+
+    Map<String, String> givenAnnotations = crAnnotations.orElseGet(IdentityHashMap::new);
+
+    List<String> existentAnnotations = givenAnnotations.keySet()
+        .stream()
+        .filter(k -> k.startsWith(STACKGRES_PREFIX))
+        .map(k -> k.substring(STACKGRES_PREFIX.length()))
+        .collect(Collectors.toList());
+
+    Map<String, String> defaultAnnotations = getDefaultAnnotationValues(configContext);
+
+    Map<String, String> annotationsToAdd = defaultAnnotations.entrySet().stream()
+        .filter(e -> !existentAnnotations.contains(e.getKey()))
+        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+
+    ImmutableList.Builder<JsonPatchOperation> operations = ImmutableList.builder();
+
+    if (!crAnnotations.isPresent()) {
+      operations.add(new AddOperation(ANNOTATION_POINTER, FACTORY.objectNode()));
+    }
+
+    operations.addAll(buildAnnotations(annotationsToAdd));
+
+    return operations.build();
+  }
+
+  default List<JsonPatchOperation> buildAnnotations(Map<String, String> annotations) {
+
+    return annotations.entrySet().stream()
+        .map(entry -> new AddOperation(
+            ANNOTATION_POINTER.append(STACKGRES_PREFIX + entry.getKey()),
+            FACTORY.textNode(entry.getValue())
+        )).collect(ImmutableList.toImmutableList());
+
+  }
+
+  default Map<String, String> getDefaultAnnotationValues(ConfigContext configContext) {
+
+    String operatorVersion = configContext.getProperty(ConfigProperty.OPERATOR_VERSION)
+        .orElseThrow(() -> new IllegalStateException("Operator version not configured"));
+
+    String operatorVersionKey = ConfigProperty.OPERATOR_VERSION.systemProperty().split("\\.")[1];
+
+    return ImmutableMap.<String, String>builder()
+        .put(operatorVersionKey, operatorVersion)
+        .build();
+  }
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/MutationUtil.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/MutationUtil.java
index 26560f6..adb57ab 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/MutationUtil.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/MutationUtil.java
@@ -5,18 +5,15 @@
 
 package io.stackgres.operator.mutation;
 
-public class MutationUtil {
+public interface MutationUtil {
 
-  public static final String MUTATION_PATH = "/stackgres/mutation";
-  public static final String CLUSTER_MUTATION_PATH = MUTATION_PATH + "/sgcluster";
-  public static final String PGCONFIG_MUTATION_PATH = MUTATION_PATH + "/sgpgconfig";
-  public static final String CONNPOOLCONFIG_MUTATION_PATH =
-      MUTATION_PATH + "/sgconnectionpoolingconfig";
-  public static final String BACKUPCONFIG_MUTATION_PATH = MUTATION_PATH + "/sgbackupconfig";
-  public static final String PROFILE_MUTATION_PATH = MUTATION_PATH + "/sgprofile";
-  public static final String RESTORECONFIG_MUTATION_PATH = MUTATION_PATH + "/sgrestoreconfig";
-
-  private MutationUtil() {
-  }
+  String MUTATION_PATH = "/stackgres/mutation";
+  String CLUSTER_MUTATION_PATH = MUTATION_PATH + "/sgcluster";
+  String PGCONFIG_MUTATION_PATH = MUTATION_PATH + "/sgpgconfig";
+  String CONNPOOLCONFIG_MUTATION_PATH =  MUTATION_PATH + "/sgconnectionpoolingconfig";
+  String BACKUPCONFIG_MUTATION_PATH = MUTATION_PATH + "/sgbackupconfig";
+  String BACKUP_MUTATION_PATH = MUTATION_PATH + "/sgbackup";
+  String PROFILE_MUTATION_PATH = MUTATION_PATH + "/sgprofile";
+  String RESTORECONFIG_MUTATION_PATH = MUTATION_PATH + "/sgrestoreconfig";
 
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/RestoreConfigMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/RestoreConfigMutator.java
index 4edec71..eeb2aa6 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/RestoreConfigMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/RestoreConfigMutator.java
@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;
 public class RestoreConfigMutator implements MutationResource<RestoreConfigReview> {
 
   private static final Logger LOGGER = LoggerFactory
-      .getLogger(BackupMutationResource.class);
+      .getLogger(BackupConfigMutationResource.class);
 
   private JsonPatchMutationPipeline<RestoreConfigReview> pipeline;
 
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupAnnotationMutator.java
index 5db56b5..9cd7ba0 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupAnnotationMutator.java
@@ -5,5 +5,14 @@
 
 package io.stackgres.operator.mutation.backup;
 
-public class BackupAnnotationMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.BackupReview;
+import io.stackgres.operator.customresource.sgbackup.StackGresBackup;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+
+@ApplicationScoped
+public class BackupAnnotationMutator
+    extends AbstractAnnotationMutator<StackGresBackup, BackupReview>
+    implements BackupMutator {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupMutator.java
index d5ffcff..f2ab45f 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupMutator.java
@@ -1,4 +1,12 @@
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
+
 package io.stackgres.operator.mutation.backup;
 
-public class BackupMutator {
+import io.stackgres.operator.common.BackupReview;
+import io.stackgres.operatorframework.JsonPatchMutator;
+
+public interface BackupMutator  extends JsonPatchMutator<BackupReview> {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupPipeline.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupPipeline.java
index 3c4b34c..201fc44 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupPipeline.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backup/BackupPipeline.java
@@ -5,5 +5,38 @@
 
 package io.stackgres.operator.mutation.backup;
 
-public class BackupPipeline {
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+import javax.enterprise.context.ApplicationScoped;
+import javax.enterprise.inject.Instance;
+import javax.inject.Inject;
+
+import com.github.fge.jsonpatch.JsonPatchOperation;
+import io.stackgres.operator.common.BackupReview;
+import io.stackgres.operatorframework.JsonPatchMutationPipeline;
+
+@ApplicationScoped
+public class BackupPipeline implements JsonPatchMutationPipeline<BackupReview> {
+
+  private Instance<BackupMutator> mutators;
+
+  @Inject
+  public BackupPipeline(Instance<BackupMutator> mutators) {
+    this.mutators = mutators;
+  }
+
+  @Override
+  public Optional<String> mutate(BackupReview review) {
+    List<JsonPatchOperation> operations = new ArrayList<>();
+
+    mutators.forEach(mutator -> operations.addAll(mutator.mutate(review)));
+
+    if (operations.isEmpty()) {
+      return Optional.empty();
+    } else {
+      return Optional.of(join(operations));
+    }
+  }
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupAnnotationMutator.java
index 14acd62..3ccf2a2 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupAnnotationMutator.java
@@ -3,7 +3,7 @@
  * SPDX-License-Identifier: AGPL-3.0-or-later
  */
 
-package io.stackgres.operator.mutation.backup;
+package io.stackgres.operator.mutation.backupconfig;
 
 import javax.enterprise.context.ApplicationScoped;
 
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutator.java
index fef31b5..de03aaa 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutator.java
@@ -3,7 +3,7 @@
  * SPDX-License-Identifier: AGPL-3.0-or-later
  */
 
-package io.stackgres.operator.mutation.backup;
+package io.stackgres.operator.mutation.backupconfig;
 
 import java.util.List;
 import javax.enterprise.context.ApplicationScoped;
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupMutator.java
index 63dcc5a..48c9364 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupMutator.java
@@ -3,7 +3,7 @@
  * SPDX-License-Identifier: AGPL-3.0-or-later
  */
 
-package io.stackgres.operator.mutation.backup;
+package io.stackgres.operator.mutation.backupconfig;
 
 import com.github.fge.jackson.jsonpointer.JsonPointer;
 
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupPipeline.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupPipeline.java
index 47aad71..338cbe2 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupPipeline.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/backupconfig/BackupPipeline.java
@@ -3,7 +3,7 @@
  * SPDX-License-Identifier: AGPL-3.0-or-later
  */
 
-package io.stackgres.operator.mutation.backup;
+package io.stackgres.operator.mutation.backupconfig;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/cluster/ClusterAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/cluster/ClusterAnnotationMutator.java
index 7343f4a..1c44c0c 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/cluster/ClusterAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/cluster/ClusterAnnotationMutator.java
@@ -5,5 +5,14 @@
 
 package io.stackgres.operator.mutation.cluster;
 
-public class ClusterAnnotationMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.StackgresClusterReview;
+import io.stackgres.operator.customresource.sgcluster.StackGresCluster;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+
+@ApplicationScoped
+public class ClusterAnnotationMutator
+    extends AbstractAnnotationMutator<StackGresCluster, StackgresClusterReview>
+    implements ClusterMutator {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgbouncer/PgBouncerAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgbouncer/PgBouncerAnnotationMutator.java
index 03d017d..6d443c8 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgbouncer/PgBouncerAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgbouncer/PgBouncerAnnotationMutator.java
@@ -5,5 +5,14 @@
 
 package io.stackgres.operator.mutation.pgbouncer;
 
-public class PgBouncerAnnotationMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.PgBouncerReview;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+import io.stackgres.operator.sidecars.pgbouncer.customresources.StackGresPgbouncerConfig;
+
+@ApplicationScoped
+public class PgBouncerAnnotationMutator
+    extends AbstractAnnotationMutator<StackGresPgbouncerConfig, PgBouncerReview>
+    implements PgBouncerMutator {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgconfig/PgConfigAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgconfig/PgConfigAnnotationMutator.java
index 1e03745..8014dd1 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgconfig/PgConfigAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/pgconfig/PgConfigAnnotationMutator.java
@@ -5,5 +5,14 @@
 
 package io.stackgres.operator.mutation.pgconfig;
 
-public class PgConfigAnnotationMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.PgConfigReview;
+import io.stackgres.operator.customresource.sgpgconfig.StackGresPostgresConfig;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+
+@ApplicationScoped
+public class PgConfigAnnotationMutator
+    extends AbstractAnnotationMutator<StackGresPostgresConfig, PgConfigReview>
+    implements PgConfigMutator {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/profile/ProfileAnnotationMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/profile/ProfileAnnotationMutator.java
index c565601..b6cf83c 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/profile/ProfileAnnotationMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/profile/ProfileAnnotationMutator.java
@@ -5,5 +5,14 @@
 
 package io.stackgres.operator.mutation.profile;
 
-public class ProfileAnnotationMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.SgProfileReview;
+import io.stackgres.operator.customresource.sgprofile.StackGresProfile;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+
+@ApplicationScoped
+public class ProfileAnnotationMutator
+    extends AbstractAnnotationMutator<StackGresProfile, SgProfileReview>
+    implements ProfileMutator {
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutator.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutator.java
index fa34f3c..d3eb079 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutator.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutator.java
@@ -1,4 +1,19 @@
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
+
 package io.stackgres.operator.mutation.restore;
 
-public class RestoreAnnotationsMutator {
+import javax.enterprise.context.ApplicationScoped;
+
+import io.stackgres.operator.common.RestoreConfigReview;
+import io.stackgres.operator.customresource.sgrestoreconfig.StackgresRestoreConfig;
+import io.stackgres.operator.mutation.AbstractAnnotationMutator;
+
+@ApplicationScoped
+public class RestoreAnnotationsMutator extends
+    AbstractAnnotationMutator<StackgresRestoreConfig, RestoreConfigReview>
+    implements RestoreMutator {
+
 }
diff --git a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/validation/ValidationUtil.java b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/validation/ValidationUtil.java
index 5327d59..99b2b9c 100644
--- a/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/validation/ValidationUtil.java
+++ b/stackgres-k8s/src/operator/src/main/java/io/stackgres/operator/validation/ValidationUtil.java
@@ -5,19 +5,15 @@
 
 package io.stackgres.operator.validation;
 
-public class ValidationUtil {
+public interface ValidationUtil {
 
-  public static final String VALIDATION_PATH = "/stackgres/validation";
-  public static final String CLUSTER_VALIDATION_PATH = VALIDATION_PATH + "/sgcluster";
-  public static final String PGCONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgpgconfig";
-  public static final String CONNPOOLCONFIG_VALIDATION_PATH =
-      VALIDATION_PATH + "/sgconnectionpoolingconfig";
-  public static final String BACKUPCONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgbackupconfig";
-  public static final String BACKUP_VALIDATION_PATH = VALIDATION_PATH + "/sgbackup";
-  public static final String PROFILE_VALIDATION_PATH = VALIDATION_PATH + "/sgprofile";
-  public static final String RESTORECONFIG_VALIDATION_PATH =  VALIDATION_PATH + "/sgrestoreconfig";
-
-  private ValidationUtil() {
-  }
+  String VALIDATION_PATH = "/stackgres/validation";
+  String CLUSTER_VALIDATION_PATH = VALIDATION_PATH + "/sgcluster";
+  String PGCONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgpgconfig";
+  String CONNPOOLCONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgconnectionpoolingconfig";
+  String BACKUPCONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgbackupconfig";
+  String BACKUP_VALIDATION_PATH = VALIDATION_PATH + "/sgbackup";
+  String PROFILE_VALIDATION_PATH = VALIDATION_PATH + "/sgprofile";
+  String RESTORECONFIG_VALIDATION_PATH = VALIDATION_PATH + "/sgrestoreconfig";
 
 }
diff --git a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupConfigMutationResourceTest.java b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupConfigMutationResourceTest.java
index bf5a645..b8a775a 100644
--- a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupConfigMutationResourceTest.java
+++ b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupConfigMutationResourceTest.java
@@ -14,11 +14,11 @@ import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-class BackupMutationResourceTest extends MutationResourceTest<BackupConfigReview> {
+class BackupConfigMutationResourceTest extends MutationResourceTest<BackupConfigReview> {
 
   @BeforeEach
   void setUp() {
-    resource = new BackupMutationResource(pipeline);
+    resource = new BackupConfigMutationResource(pipeline);
 
     review = JsonUtil
         .readFromJson("backupconfig_allow_request/create.json", BackupConfigReview.class);
diff --git a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupMutationResourceTest.java b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupMutationResourceTest.java
index dab9b88..b536627 100644
--- a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupMutationResourceTest.java
+++ b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/BackupMutationResourceTest.java
@@ -5,8 +5,21 @@
 
 package io.stackgres.operator.mutation;
 
-import static org.junit.jupiter.api.Assertions.*;
+import io.stackgres.operator.common.BackupReview;
+import io.stackgres.operator.utils.JsonUtil;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.junit.jupiter.MockitoExtension;
 
-class BackupMutationResourceTest {
+@ExtendWith(MockitoExtension.class)
+class BackupMutationResourceTest extends MutationResourceTest<BackupReview> {
+
+  @BeforeEach
+  void setUp() {
+    resource = new BackupMutationResource(pipeline);
+
+    review = JsonUtil
+        .readFromJson("backup_allow_request/create.json", BackupReview.class);
+  }
 
 }
\ No newline at end of file
diff --git a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutatorTest.java b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutatorTest.java
index 9396097..1136b97 100644
--- a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutatorTest.java
+++ b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/backupconfig/BackupConfigDefaultValuesMutatorTest.java
@@ -3,10 +3,9 @@
  * SPDX-License-Identifier: AGPL-3.0-or-later
  */
 
-package io.stackgres.operator.mutation.backup;
+package io.stackgres.operator.mutation.backupconfig;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.github.fge.jsonpatch.JsonPatchException;
 
 import io.stackgres.operator.common.BackupConfigReview;
 import io.stackgres.operator.customresource.sgbackupconfig.StackGresBackupConfig;
@@ -15,7 +14,6 @@ import io.stackgres.operator.mutation.DefaultValuesMutator;
 import io.stackgres.operator.mutation.DefaultValuesMutatorTest;
 import io.stackgres.operator.utils.JsonUtil;
 
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
 
diff --git a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutatorTest.java b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutatorTest.java
index eb2ab1e..12bfcd8 100644
--- a/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutatorTest.java
+++ b/stackgres-k8s/src/operator/src/test/java/io/stackgres/operator/mutation/restore/RestoreAnnotationsMutatorTest.java
@@ -1,5 +1,149 @@
-import static org.junit.jupiter.api.Assertions.*;
+/*
+ * Copyright (C) 2019 OnGres, Inc.
+ * SPDX-License-Identifier: AGPL-3.0-or-later
+ */
 
-class RestoreAnnotationsMutatorTest {
+package io.stackgres.operator.mutation.restore;
 
+import java.util.List;
+import java.util.Map;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.fge.jsonpatch.JsonPatch;
+import com.github.fge.jsonpatch.JsonPatchException;
+import com.github.fge.jsonpatch.JsonPatchOperation;
+import com.google.common.collect.ImmutableMap;
+import io.stackgres.operator.WithRestoreReviewResources;
+import io.stackgres.operator.common.ConfigLoader;
+import io.stackgres.operator.common.RestoreConfigReview;
+import io.stackgres.operator.customresource.sgrestoreconfig.StackgresRestoreConfig;
+import io.stackgres.operator.mutation.DefaultAnnotationMutator;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+@ExtendWith(MockitoExtension.class)
+class RestoreAnnotationsMutatorTest implements WithRestoreReviewResources {
+
+  protected static final ObjectMapper mapper = new ObjectMapper();
+
+  private static ConfigLoader configLoader = new ConfigLoader();
+
+  private static RestoreAnnotationsMutator mutator = new RestoreAnnotationsMutator();
+
+  Map<String, String> defaultAnnotations = mutator.getDefaultAnnotationValues(configLoader);
+
+  @BeforeAll
+  static void beforeAll() {
+    mutator.setConfigContext(configLoader);
+  }
+
+  @Test
+  void givenACreationWithEmptyAnnotations_itShouldAddTheDefaultAnnotations() throws JsonPatchException, JsonProcessingException {
+
+    RestoreConfigReview review = getCreationReview();
+    review.getRequest().getObject().getMetadata().setAnnotations(ImmutableMap.of());
+
+    List<JsonPatchOperation> operations = mutator.mutate(review);
+
+    StackgresRestoreConfig newCrConfig = applyOperations(review, operations);
+
+    Map<String, String> crAnnotations = newCrConfig.getMetadata().getAnnotations();
+    assertEquals(defaultAnnotations.size(), crAnnotations.size());
+
+    assertDefaultAnnotations(crAnnotations);
+
+  }
+
+  @Test
+  void givenACreationWithNullAnnotations_itShouldAddTheDefaultAnnotations() throws JsonPatchException, JsonProcessingException {
+
+    RestoreConfigReview review = getCreationReview();
+    review.getRequest().getObject().getMetadata().setAnnotations(null);
+
+    List<JsonPatchOperation> operations = mutator.mutate(review);
+
+    StackgresRestoreConfig newCrConfig = applyOperations(review, operations);
+
+    Map<String, String> crAnnotations = newCrConfig.getMetadata().getAnnotations();
+    assertEquals(defaultAnnotations.size(), crAnnotations.size());
+
+    assertDefaultAnnotations(crAnnotations);
+
+  }
+
+  @Test
+  void givenACreationWithTheDefaultAnnotations_itShouldNotAddAnything() {
+
+    RestoreConfigReview review = getCreationReview();
+
+    ImmutableMap.Builder<String, String> annotationBuilder = ImmutableMap.builder();
+
+    defaultAnnotations.forEach((k, v) -> annotationBuilder
+        .put(DefaultAnnotationMutator.STACKGRES_PREFIX + k, v));
+
+    review.getRequest().getObject().getMetadata().setAnnotations(annotationBuilder.build());
+
+    List<JsonPatchOperation> operations = mutator.mutate(review);
+
+    assertTrue(operations.isEmpty());
+
+  }
+
+  @Test
+  void givenACreationWithAnnotationsButNotTheDefaultOnes_itShouldNotAddAnything()
+      throws JsonPatchException, JsonProcessingException {
+
+    RestoreConfigReview review = getCreationReview();
+    review.getRequest().getObject().getMetadata()
+        .setAnnotations(ImmutableMap.of("stackgresIs", "Awesome"));
+
+    List<JsonPatchOperation> operations = mutator.mutate(review);
+
+    StackgresRestoreConfig newCr = applyOperations(review, operations);
+
+    Map<String, String> newAnnotations = newCr.getMetadata().getAnnotations();
+    assertDefaultAnnotations(newAnnotations);
+
+    assertEquals(defaultAnnotations.size() + 1, newAnnotations.size());
+
+  }
+
+  @Test
+  void givenAnUpdate_itShouldDoAnything() {
+
+    RestoreConfigReview review = getUpdateReview();
+
+    List<JsonPatchOperation> operations = mutator.mutate(review);
+
+    assertTrue(operations.isEmpty());
+  }
+
+  private StackgresRestoreConfig applyOperations
+      (RestoreConfigReview review, List<JsonPatchOperation> operations)
+      throws JsonPatchException, JsonProcessingException {
+    JsonNode reviewNode = mapper.valueToTree(review.getRequest().getObject());
+
+    JsonPatch jp = new JsonPatch(operations);
+    JsonNode newReviewNode = jp.apply(reviewNode);
+
+    return mapper.treeToValue(newReviewNode, StackgresRestoreConfig.class);
+  }
+
+  private void assertDefaultAnnotations(Map<String, String> crAnnotations) {
+    defaultAnnotations.forEach((k, v) -> {
+      String actualKey = DefaultAnnotationMutator.STACKGRES_PREFIX + k;
+      assertTrue(crAnnotations.containsKey(actualKey));
+
+      String crAnnotationValue = crAnnotations.get(actualKey);
+      assertEquals(v, crAnnotationValue);
+
+    });
+  }
 }
\ No newline at end of file
diff --git a/stackgres-k8s/src/operator/src/test/resources/backup_allow_request/create.json b/stackgres-k8s/src/operator/src/test/resources/backup_allow_request/create.json
index e69de29..a713556 100644
--- a/stackgres-k8s/src/operator/src/test/resources/backup_allow_request/create.json
+++ b/stackgres-k8s/src/operator/src/test/resources/backup_allow_request/create.json
@@ -0,0 +1,61 @@
+{
+  "kind": "AdmissionReview",
+  "request": {
+    "uid": "c2f4a2a1-3939-11ea-be74-0242ac110002",
+    "kind": {
+      "kind": "StackGresBackup",
+      "group": "stackgres.io",
+      "version": "v1alpha1"
+    },
+    "resource": {
+      "group": "stackgres.io",
+      "resource": "sgbackups",
+      "version": "v1alpha1"
+    },
+    "subResource": null,
+    "requestKind": null,
+    "requestResource": null,
+    "requestSubResource": null,
+    "name": null,
+    "namespace": "backup-with-default-storage",
+    "operation": "CREATE",
+    "userInfo": {
+      "groups": [
+        "system:serviceaccounts",
+        "system:serviceaccounts:backup-with-default-storage",
+        "system:authenticated"
+      ],
+      "uid": "7683f3c9-3939-11ea-be74-0242ac110002",
+      "username": "system:serviceaccount:backup-with-default-storage:backup-with-default-storage-patroni"
+    },
+    "object": {
+      "kind": "StackGresBackup",
+      "apiVersion": "stackgres.io/v1alpha1",
+      "metadata": {
+        "name": "backup-with-default-storage-bded7e9a-3939-11ea-be74-0242ac110002",
+        "namespace": "backup-with-default-storage",
+        "ownerReferences": [
+          {
+            "apiVersion": "batch/v1beta1",
+            "kind": "CronJob",
+            "name": "backup-with-default-storage-backup",
+            "uid": "769faf87-3939-11ea-be74-0242ac110002"
+          }
+        ]
+      },
+      "spec": {
+        "cluster": "backup-with-default-storage",
+        "isPermanent": false
+      },
+      "status": {
+        "backupConfig": "backupconf",
+        "phase": "Pending",
+        "pod": "backup-with-default-storage-backup-1579273020-svf9b"
+      }
+    },
+    "oldObject": null,
+    "options": null,
+    "dryRun": false
+  },
+  "apiVersion": "admission.k8s.io/v1beta1"
+}
-- 
2.17.1

