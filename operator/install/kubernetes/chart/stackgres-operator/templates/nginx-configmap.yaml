apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.operatorName }}-nginx
  {{- if .Values.namespace.create }}
  namespace: {{ .Values.operatorNamespace }}
  {{- end }}
data:
  stackgres-operator.conf: |
    server {
        error_log /var/log/nginx/error.log debug;
        
        server_name  localhost;
        
        listen       443 ssl;
        ssl_certificate         /etc/operator/certs/server.crt;
        ssl_certificate_key     /etc/operator/certs/root.key;
        
        {{- if .Values.grafana }}
        {{- if and .Values.grafana.url .Values.grafana.token .Values.grafana.httpHost }}
        location /grafana {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            return 302 "$scheme://$http_host{{ regexReplaceAll "^https?://[^/]+(/.*)$" .Values.grafana.url "${1}" }}&theme=light&kiosk=tv";
        }
        {{ end }}
        {{ end }}
        
        location /web {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            index index.html index.htm;
            proxy_pass http://localhost:8080;
        }
        
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            index index.html index.htm;
            {{- if .Values.grafana }}
            {{- if and .Values.grafana.url .Values.grafana.token .Values.grafana.httpHost }}
            if ($http_RedirectToGrafana != "false") {
                set $test "redirect_to_grafana";
            }
            set $authorization "${http_Authorization}";
            if ($test = "redirect_to_grafana") {
                set $authorization 'Bearer {{ .Values.grafana.token }}';
            }
            proxy_set_header Authorization "${authorization}";
            if ($test = "redirect_to_grafana") {
                proxy_pass "{{ default "http" .Values.grafana.scheme }}://{{ regexReplaceAll "/" .Values.grafana.httpHost "" }}";
            }
            {{ end }}
            {{ end }}
            if ($test != "redirect_to_grafana") {
                proxy_pass http://localhost:8080;
            }
        }
    }

